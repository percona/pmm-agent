// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package actions

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type mysqlExplainViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *mysqlExplainViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("mysql_explain").
func (v *mysqlExplainViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *mysqlExplainViewType) Columns() []string {
	return []string{"id", "select_type", "table", "type", "possible_keys", "key", "key_len", "ref", "rows", "Extra"}
}

// NewStruct makes a new struct for that view or table.
func (v *mysqlExplainViewType) NewStruct() reform.Struct {
	return new(mysqlExplain)
}

// mysqlExplainView represents mysql_explain view or table in SQL database.
var mysqlExplainView = &mysqlExplainViewType{
	s: parse.StructInfo{Type: "mysqlExplain", SQLSchema: "", SQLName: "mysql_explain", Fields: []parse.FieldInfo{{Name: "ID", Type: "*nullString", Column: "id"}, {Name: "SelectType", Type: "*nullString", Column: "select_type"}, {Name: "Table", Type: "*nullString", Column: "table"}, {Name: "Type", Type: "*nullString", Column: "type"}, {Name: "PossibleKeys", Type: "*nullString", Column: "possible_keys"}, {Name: "Key", Type: "*nullString", Column: "key"}, {Name: "KeyKen", Type: "*nullString", Column: "key_len"}, {Name: "Ref", Type: "*nullString", Column: "ref"}, {Name: "Rows", Type: "*nullString", Column: "rows"}, {Name: "Extra", Type: "*nullString", Column: "Extra"}}, PKFieldIndex: -1},
	z: new(mysqlExplain).Values(),
}

// String returns a string representation of this struct or record.
func (s mysqlExplain) String() string {
	res := make([]string, 10)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "SelectType: " + reform.Inspect(s.SelectType, true)
	res[2] = "Table: " + reform.Inspect(s.Table, true)
	res[3] = "Type: " + reform.Inspect(s.Type, true)
	res[4] = "PossibleKeys: " + reform.Inspect(s.PossibleKeys, true)
	res[5] = "Key: " + reform.Inspect(s.Key, true)
	res[6] = "KeyKen: " + reform.Inspect(s.KeyKen, true)
	res[7] = "Ref: " + reform.Inspect(s.Ref, true)
	res[8] = "Rows: " + reform.Inspect(s.Rows, true)
	res[9] = "Extra: " + reform.Inspect(s.Extra, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *mysqlExplain) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.SelectType,
		s.Table,
		s.Type,
		s.PossibleKeys,
		s.Key,
		s.KeyKen,
		s.Ref,
		s.Rows,
		s.Extra,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *mysqlExplain) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.SelectType,
		&s.Table,
		&s.Type,
		&s.PossibleKeys,
		&s.Key,
		&s.KeyKen,
		&s.Ref,
		&s.Rows,
		&s.Extra,
	}
}

// View returns View object for that struct.
func (s *mysqlExplain) View() reform.View {
	return mysqlExplainView
}

// check interfaces
var (
	_ reform.View   = mysqlExplainView
	_ reform.Struct = (*mysqlExplain)(nil)
	_ fmt.Stringer  = (*mysqlExplain)(nil)
)

func init() {
	parse.AssertUpToDate(&mysqlExplainView.s, new(mysqlExplain))
}
