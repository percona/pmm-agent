// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: inventorypb/tunnels.proto

package inventorypb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Tunnel represents a single Tunnel configuration.
type Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tunnel ID.
	TunnelId string `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// Agent ID of the listening pmm-agent.
	ListenAgentId string `protobuf:"bytes,2,opt,name=listen_agent_id,json=listenAgentId,proto3" json:"listen_agent_id,omitempty"`
	// Listen port of the listening pmm-agent.
	ListenPort uint32 `protobuf:"varint,3,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	// Agent ID of the connecting pmm-agent.
	ConnectAgentId string `protobuf:"bytes,4,opt,name=connect_agent_id,json=connectAgentId,proto3" json:"connect_agent_id,omitempty"`
	// Target port of the connecting pmm-agent.
	ConnectPort uint32 `protobuf:"varint,5,opt,name=connect_port,json=connectPort,proto3" json:"connect_port,omitempty"`
}

func (x *Tunnel) Reset() {
	*x = Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventorypb_tunnels_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tunnel) ProtoMessage() {}

func (x *Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_inventorypb_tunnels_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tunnel.ProtoReflect.Descriptor instead.
func (*Tunnel) Descriptor() ([]byte, []int) {
	return file_inventorypb_tunnels_proto_rawDescGZIP(), []int{0}
}

func (x *Tunnel) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

func (x *Tunnel) GetListenAgentId() string {
	if x != nil {
		return x.ListenAgentId
	}
	return ""
}

func (x *Tunnel) GetListenPort() uint32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

func (x *Tunnel) GetConnectAgentId() string {
	if x != nil {
		return x.ConnectAgentId
	}
	return ""
}

func (x *Tunnel) GetConnectPort() uint32 {
	if x != nil {
		return x.ConnectPort
	}
	return 0
}

type ListTunnelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return only Tunnels where one (or both) pmm-agent has this ID.
	AgentId string `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *ListTunnelsRequest) Reset() {
	*x = ListTunnelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventorypb_tunnels_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTunnelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTunnelsRequest) ProtoMessage() {}

func (x *ListTunnelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventorypb_tunnels_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTunnelsRequest.ProtoReflect.Descriptor instead.
func (*ListTunnelsRequest) Descriptor() ([]byte, []int) {
	return file_inventorypb_tunnels_proto_rawDescGZIP(), []int{1}
}

func (x *ListTunnelsRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

type ListTunnelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnel []*Tunnel `protobuf:"bytes,1,rep,name=tunnel,proto3" json:"tunnel,omitempty"`
}

func (x *ListTunnelsResponse) Reset() {
	*x = ListTunnelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventorypb_tunnels_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTunnelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTunnelsResponse) ProtoMessage() {}

func (x *ListTunnelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventorypb_tunnels_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTunnelsResponse.ProtoReflect.Descriptor instead.
func (*ListTunnelsResponse) Descriptor() ([]byte, []int) {
	return file_inventorypb_tunnels_proto_rawDescGZIP(), []int{2}
}

func (x *ListTunnelsResponse) GetTunnel() []*Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

type AddTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent ID of the listening pmm-agent.
	ListenAgentId string `protobuf:"bytes,1,opt,name=listen_agent_id,json=listenAgentId,proto3" json:"listen_agent_id,omitempty"`
	// Listen port of the listening pmm-agent.
	ListenPort uint32 `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	// Agent ID of the connecting pmm-agent.
	ConnectAgentId string `protobuf:"bytes,3,opt,name=connect_agent_id,json=connectAgentId,proto3" json:"connect_agent_id,omitempty"`
	// Target port of the connecting pmm-agent.
	ConnectPort uint32 `protobuf:"varint,4,opt,name=connect_port,json=connectPort,proto3" json:"connect_port,omitempty"`
}

func (x *AddTunnelRequest) Reset() {
	*x = AddTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventorypb_tunnels_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTunnelRequest) ProtoMessage() {}

func (x *AddTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventorypb_tunnels_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTunnelRequest.ProtoReflect.Descriptor instead.
func (*AddTunnelRequest) Descriptor() ([]byte, []int) {
	return file_inventorypb_tunnels_proto_rawDescGZIP(), []int{3}
}

func (x *AddTunnelRequest) GetListenAgentId() string {
	if x != nil {
		return x.ListenAgentId
	}
	return ""
}

func (x *AddTunnelRequest) GetListenPort() uint32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

func (x *AddTunnelRequest) GetConnectAgentId() string {
	if x != nil {
		return x.ConnectAgentId
	}
	return ""
}

func (x *AddTunnelRequest) GetConnectPort() uint32 {
	if x != nil {
		return x.ConnectPort
	}
	return 0
}

type AddTunnelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tunnel ID.
	TunnelId string `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
}

func (x *AddTunnelResponse) Reset() {
	*x = AddTunnelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventorypb_tunnels_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTunnelResponse) ProtoMessage() {}

func (x *AddTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventorypb_tunnels_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTunnelResponse.ProtoReflect.Descriptor instead.
func (*AddTunnelResponse) Descriptor() ([]byte, []int) {
	return file_inventorypb_tunnels_proto_rawDescGZIP(), []int{4}
}

func (x *AddTunnelResponse) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

type RemoveTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelId string `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
}

func (x *RemoveTunnelRequest) Reset() {
	*x = RemoveTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventorypb_tunnels_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunnelRequest) ProtoMessage() {}

func (x *RemoveTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventorypb_tunnels_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunnelRequest.ProtoReflect.Descriptor instead.
func (*RemoveTunnelRequest) Descriptor() ([]byte, []int) {
	return file_inventorypb_tunnels_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveTunnelRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

type RemoveTunnelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTunnelResponse) Reset() {
	*x = RemoveTunnelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventorypb_tunnels_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunnelResponse) ProtoMessage() {}

func (x *RemoveTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventorypb_tunnels_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunnelResponse.ProtoReflect.Descriptor instead.
func (*RemoveTunnelResponse) Descriptor() ([]byte, []int) {
	return file_inventorypb_tunnels_proto_rawDescGZIP(), []int{6}
}

var File_inventorypb_tunnels_proto protoreflect.FileDescriptor

var file_inventorypb_tunnels_proto_rawDesc = []byte{
	0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x70, 0x62, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a,
	0x06, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x2f, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xd0, 0x01,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x10, 0x00, 0x18,
	0x80, 0x80, 0x04, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x30, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe2, 0xdf, 0x1f, 0x06, 0x10, 0x00, 0x18,
	0x80, 0x80, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x30, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x3a, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x16,
	0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe6, 0x02, 0x0a, 0x07, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x73, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x4c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x41,
	0x64, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x42,
	0x1d, 0x5a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x70, 0x62, 0x3b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inventorypb_tunnels_proto_rawDescOnce sync.Once
	file_inventorypb_tunnels_proto_rawDescData = file_inventorypb_tunnels_proto_rawDesc
)

func file_inventorypb_tunnels_proto_rawDescGZIP() []byte {
	file_inventorypb_tunnels_proto_rawDescOnce.Do(func() {
		file_inventorypb_tunnels_proto_rawDescData = protoimpl.X.CompressGZIP(file_inventorypb_tunnels_proto_rawDescData)
	})
	return file_inventorypb_tunnels_proto_rawDescData
}

var file_inventorypb_tunnels_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_inventorypb_tunnels_proto_goTypes = []interface{}{
	(*Tunnel)(nil),               // 0: inventory.Tunnel
	(*ListTunnelsRequest)(nil),   // 1: inventory.ListTunnelsRequest
	(*ListTunnelsResponse)(nil),  // 2: inventory.ListTunnelsResponse
	(*AddTunnelRequest)(nil),     // 3: inventory.AddTunnelRequest
	(*AddTunnelResponse)(nil),    // 4: inventory.AddTunnelResponse
	(*RemoveTunnelRequest)(nil),  // 5: inventory.RemoveTunnelRequest
	(*RemoveTunnelResponse)(nil), // 6: inventory.RemoveTunnelResponse
}
var file_inventorypb_tunnels_proto_depIdxs = []int32{
	0, // 0: inventory.ListTunnelsResponse.tunnel:type_name -> inventory.Tunnel
	1, // 1: inventory.Tunnels.ListTunnels:input_type -> inventory.ListTunnelsRequest
	3, // 2: inventory.Tunnels.AddTunnel:input_type -> inventory.AddTunnelRequest
	5, // 3: inventory.Tunnels.RemoveTunnel:input_type -> inventory.RemoveTunnelRequest
	2, // 4: inventory.Tunnels.ListTunnels:output_type -> inventory.ListTunnelsResponse
	4, // 5: inventory.Tunnels.AddTunnel:output_type -> inventory.AddTunnelResponse
	6, // 6: inventory.Tunnels.RemoveTunnel:output_type -> inventory.RemoveTunnelResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_inventorypb_tunnels_proto_init() }
func file_inventorypb_tunnels_proto_init() {
	if File_inventorypb_tunnels_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inventorypb_tunnels_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventorypb_tunnels_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTunnelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventorypb_tunnels_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTunnelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventorypb_tunnels_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventorypb_tunnels_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTunnelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventorypb_tunnels_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventorypb_tunnels_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunnelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inventorypb_tunnels_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inventorypb_tunnels_proto_goTypes,
		DependencyIndexes: file_inventorypb_tunnels_proto_depIdxs,
		MessageInfos:      file_inventorypb_tunnels_proto_msgTypes,
	}.Build()
	File_inventorypb_tunnels_proto = out.File
	file_inventorypb_tunnels_proto_rawDesc = nil
	file_inventorypb_tunnels_proto_goTypes = nil
	file_inventorypb_tunnels_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TunnelsClient is the client API for Tunnels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TunnelsClient interface {
	// ListTunnels returns a list of all Tunnels.
	ListTunnels(ctx context.Context, in *ListTunnelsRequest, opts ...grpc.CallOption) (*ListTunnelsResponse, error)
	// AddTunnel adds a Tunnel.
	AddTunnel(ctx context.Context, in *AddTunnelRequest, opts ...grpc.CallOption) (*AddTunnelResponse, error)
	// RemoveTunnel removes a Tunnel.
	RemoveTunnel(ctx context.Context, in *RemoveTunnelRequest, opts ...grpc.CallOption) (*RemoveTunnelResponse, error)
}

type tunnelsClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelsClient(cc grpc.ClientConnInterface) TunnelsClient {
	return &tunnelsClient{cc}
}

func (c *tunnelsClient) ListTunnels(ctx context.Context, in *ListTunnelsRequest, opts ...grpc.CallOption) (*ListTunnelsResponse, error) {
	out := new(ListTunnelsResponse)
	err := c.cc.Invoke(ctx, "/inventory.Tunnels/ListTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelsClient) AddTunnel(ctx context.Context, in *AddTunnelRequest, opts ...grpc.CallOption) (*AddTunnelResponse, error) {
	out := new(AddTunnelResponse)
	err := c.cc.Invoke(ctx, "/inventory.Tunnels/AddTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelsClient) RemoveTunnel(ctx context.Context, in *RemoveTunnelRequest, opts ...grpc.CallOption) (*RemoveTunnelResponse, error) {
	out := new(RemoveTunnelResponse)
	err := c.cc.Invoke(ctx, "/inventory.Tunnels/RemoveTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelsServer is the server API for Tunnels service.
type TunnelsServer interface {
	// ListTunnels returns a list of all Tunnels.
	ListTunnels(context.Context, *ListTunnelsRequest) (*ListTunnelsResponse, error)
	// AddTunnel adds a Tunnel.
	AddTunnel(context.Context, *AddTunnelRequest) (*AddTunnelResponse, error)
	// RemoveTunnel removes a Tunnel.
	RemoveTunnel(context.Context, *RemoveTunnelRequest) (*RemoveTunnelResponse, error)
}

// UnimplementedTunnelsServer can be embedded to have forward compatible implementations.
type UnimplementedTunnelsServer struct {
}

func (*UnimplementedTunnelsServer) ListTunnels(context.Context, *ListTunnelsRequest) (*ListTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTunnels not implemented")
}
func (*UnimplementedTunnelsServer) AddTunnel(context.Context, *AddTunnelRequest) (*AddTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTunnel not implemented")
}
func (*UnimplementedTunnelsServer) RemoveTunnel(context.Context, *RemoveTunnelRequest) (*RemoveTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTunnel not implemented")
}

func RegisterTunnelsServer(s *grpc.Server, srv TunnelsServer) {
	s.RegisterService(&_Tunnels_serviceDesc, srv)
}

func _Tunnels_ListTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelsServer).ListTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Tunnels/ListTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelsServer).ListTunnels(ctx, req.(*ListTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnels_AddTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelsServer).AddTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Tunnels/AddTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelsServer).AddTunnel(ctx, req.(*AddTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnels_RemoveTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelsServer).RemoveTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Tunnels/RemoveTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelsServer).RemoveTunnel(ctx, req.(*RemoveTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tunnels_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.Tunnels",
	HandlerType: (*TunnelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTunnels",
			Handler:    _Tunnels_ListTunnels_Handler,
		},
		{
			MethodName: "AddTunnel",
			Handler:    _Tunnels_AddTunnel_Handler,
		},
		{
			MethodName: "RemoveTunnel",
			Handler:    _Tunnels_RemoveTunnel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventorypb/tunnels.proto",
}
