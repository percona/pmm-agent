// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qanpb/collector.proto

package qanpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MetricsSource defines collected metrics source.
type MetricsSource int32

const (
	MetricsSource_METRICS_SOURCE_INVALID MetricsSource = 0
	MetricsSource_MYSQL_SLOWLOG          MetricsSource = 1
	MetricsSource_MYSQL_PERFSCHEMA       MetricsSource = 2
	MetricsSource_MONGODB_PROFILER       MetricsSource = 3
)

var MetricsSource_name = map[int32]string{
	0: "METRICS_SOURCE_INVALID",
	1: "MYSQL_SLOWLOG",
	2: "MYSQL_PERFSCHEMA",
	3: "MONGODB_PROFILER",
}

var MetricsSource_value = map[string]int32{
	"METRICS_SOURCE_INVALID": 0,
	"MYSQL_SLOWLOG":          1,
	"MYSQL_PERFSCHEMA":       2,
	"MONGODB_PROFILER":       3,
}

func (x MetricsSource) String() string {
	return proto.EnumName(MetricsSource_name, int32(x))
}

func (MetricsSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f08230f69f9090cc, []int{0}
}

type CollectRequest struct {
	MetricsBucket        []*MetricsBucket `protobuf:"bytes,1,rep,name=metrics_bucket,json=metricsBucket,proto3" json:"metrics_bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CollectRequest) Reset()         { *m = CollectRequest{} }
func (m *CollectRequest) String() string { return proto.CompactTextString(m) }
func (*CollectRequest) ProtoMessage()    {}
func (*CollectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f08230f69f9090cc, []int{0}
}

func (m *CollectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectRequest.Unmarshal(m, b)
}
func (m *CollectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectRequest.Marshal(b, m, deterministic)
}
func (m *CollectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectRequest.Merge(m, src)
}
func (m *CollectRequest) XXX_Size() int {
	return xxx_messageInfo_CollectRequest.Size(m)
}
func (m *CollectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectRequest proto.InternalMessageInfo

func (m *CollectRequest) GetMetricsBucket() []*MetricsBucket {
	if m != nil {
		return m.MetricsBucket
	}
	return nil
}

// MetricsBucket is aggregated message created by pmm-agent.
// Contains information about one query selected in defined way from query class in specific period of time.
type MetricsBucket struct {
	// md5 of digest_text/fingerprint.
	Queryid string `protobuf:"bytes,1,opt,name=queryid,proto3" json:"queryid,omitempty"`
	// digest_text - query signature. Query without values.
	Fingerprint string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Server.
	DServer string `protobuf:"bytes,3,opt,name=d_server,json=dServer,proto3" json:"d_server,omitempty"`
	// PostgreSQL database.
	DDatabase string `protobuf:"bytes,4,opt,name=d_database,json=dDatabase,proto3" json:"d_database,omitempty"`
	// MySQL database or PostgreSQL schema.
	DSchema string `protobuf:"bytes,5,opt,name=d_schema,json=dSchema,proto3" json:"d_schema,omitempty"`
	// client user name.
	DUsername string `protobuf:"bytes,6,opt,name=d_username,json=dUsername,proto3" json:"d_username,omitempty"`
	// client IP or hostname.
	DClientHost string `protobuf:"bytes,7,opt,name=d_client_host,json=dClientHost,proto3" json:"d_client_host,omitempty"`
	// Custom labels names:values.
	Labels map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Identifier of agent that collect and send metrics.
	AgentUuid string `protobuf:"bytes,9,opt,name=agent_uuid,json=agentUuid,proto3" json:"agent_uuid,omitempty"`
	// Time when collection of bucket started.
	PeriodStartUnixSecs uint32 `protobuf:"varint,10,opt,name=period_start_unix_secs,json=periodStartUnixSecs,proto3" json:"period_start_unix_secs,omitempty"`
	// Duration of bucket.
	PeriodLengthSecs uint32 `protobuf:"varint,11,opt,name=period_length_secs,json=periodLengthSecs,proto3" json:"period_length_secs,omitempty"`
	// Metrics source.
	MetricsSource MetricsSource `protobuf:"varint,12,opt,name=metrics_source,json=metricsSource,proto3,enum=qan.MetricsSource" json:"metrics_source,omitempty"`
	// One of query example from set found in bucket.
	Example       string        `protobuf:"bytes,13,opt,name=example,proto3" json:"example,omitempty"`
	ExampleFormat ExampleFormat `protobuf:"varint,14,opt,name=example_format,json=exampleFormat,proto3,enum=qan.ExampleFormat" json:"example_format,omitempty"`
	// Indicates if query examples is too long and was truncated.
	IsTruncated bool        `protobuf:"varint,15,opt,name=is_truncated,json=isTruncated,proto3" json:"is_truncated,omitempty"`
	ExampleType ExampleType `protobuf:"varint,16,opt,name=example_type,json=exampleType,proto3,enum=qan.ExampleType" json:"example_type,omitempty"`
	// Metrics of query example in JSON format.
	ExampleMetrics string `protobuf:"bytes,17,opt,name=example_metrics,json=exampleMetrics,proto3" json:"example_metrics,omitempty"`
	// How many queries was with warnings in bucket.
	NumQueriesWithWarnings float32 `protobuf:"fixed32,18,opt,name=num_queries_with_warnings,json=numQueriesWithWarnings,proto3" json:"num_queries_with_warnings,omitempty"`
	// List of warnings: {code: count}.
	Warnings map[uint64]uint64 `protobuf:"bytes,19,rep,name=warnings,proto3" json:"warnings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// How many queries was with error in bucket.
	NumQueriesWithErrors float32 `protobuf:"fixed32,20,opt,name=num_queries_with_errors,json=numQueriesWithErrors,proto3" json:"num_queries_with_errors,omitempty"`
	// List of errors: {code: count}.
	Errors map[uint64]uint64 `protobuf:"bytes,21,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Amount queries in this bucket.
	NumQueries float32 `protobuf:"fixed32,22,opt,name=num_queries,json=numQueries,proto3" json:"num_queries,omitempty"`
	// How many times query_time was found.
	MQueryTimeCnt float32 `protobuf:"fixed32,23,opt,name=m_query_time_cnt,json=mQueryTimeCnt,proto3" json:"m_query_time_cnt,omitempty"`
	// The statement execution time in seconds.
	MQueryTimeSum float32 `protobuf:"fixed32,24,opt,name=m_query_time_sum,json=mQueryTimeSum,proto3" json:"m_query_time_sum,omitempty"`
	// Smallest value of query_time in bucket.
	MQueryTimeMin float32 `protobuf:"fixed32,25,opt,name=m_query_time_min,json=mQueryTimeMin,proto3" json:"m_query_time_min,omitempty"`
	// Biggest value of query_time in bucket.
	MQueryTimeMax float32 `protobuf:"fixed32,26,opt,name=m_query_time_max,json=mQueryTimeMax,proto3" json:"m_query_time_max,omitempty"`
	// 99 percentile of value of query_time in bucket.
	MQueryTimeP99 float32 `protobuf:"fixed32,27,opt,name=m_query_time_p99,json=mQueryTimeP99,proto3" json:"m_query_time_p99,omitempty"`
	MLockTimeCnt  float32 `protobuf:"fixed32,28,opt,name=m_lock_time_cnt,json=mLockTimeCnt,proto3" json:"m_lock_time_cnt,omitempty"`
	// The time to acquire locks in seconds.
	MLockTimeSum float32 `protobuf:"fixed32,29,opt,name=m_lock_time_sum,json=mLockTimeSum,proto3" json:"m_lock_time_sum,omitempty"`
	MLockTimeMin float32 `protobuf:"fixed32,30,opt,name=m_lock_time_min,json=mLockTimeMin,proto3" json:"m_lock_time_min,omitempty"`
	MLockTimeMax float32 `protobuf:"fixed32,31,opt,name=m_lock_time_max,json=mLockTimeMax,proto3" json:"m_lock_time_max,omitempty"`
	MLockTimeP99 float32 `protobuf:"fixed32,32,opt,name=m_lock_time_p99,json=mLockTimeP99,proto3" json:"m_lock_time_p99,omitempty"`
	MRowsSentCnt float32 `protobuf:"fixed32,33,opt,name=m_rows_sent_cnt,json=mRowsSentCnt,proto3" json:"m_rows_sent_cnt,omitempty"`
	// The number of rows sent to the client.
	MRowsSentSum     float32 `protobuf:"fixed32,34,opt,name=m_rows_sent_sum,json=mRowsSentSum,proto3" json:"m_rows_sent_sum,omitempty"`
	MRowsSentMin     float32 `protobuf:"fixed32,35,opt,name=m_rows_sent_min,json=mRowsSentMin,proto3" json:"m_rows_sent_min,omitempty"`
	MRowsSentMax     float32 `protobuf:"fixed32,36,opt,name=m_rows_sent_max,json=mRowsSentMax,proto3" json:"m_rows_sent_max,omitempty"`
	MRowsSentP99     float32 `protobuf:"fixed32,37,opt,name=m_rows_sent_p99,json=mRowsSentP99,proto3" json:"m_rows_sent_p99,omitempty"`
	MRowsExaminedCnt float32 `protobuf:"fixed32,38,opt,name=m_rows_examined_cnt,json=mRowsExaminedCnt,proto3" json:"m_rows_examined_cnt,omitempty"`
	// Number of rows scanned - SELECT.
	MRowsExaminedSum float32 `protobuf:"fixed32,39,opt,name=m_rows_examined_sum,json=mRowsExaminedSum,proto3" json:"m_rows_examined_sum,omitempty"`
	MRowsExaminedMin float32 `protobuf:"fixed32,40,opt,name=m_rows_examined_min,json=mRowsExaminedMin,proto3" json:"m_rows_examined_min,omitempty"`
	MRowsExaminedMax float32 `protobuf:"fixed32,41,opt,name=m_rows_examined_max,json=mRowsExaminedMax,proto3" json:"m_rows_examined_max,omitempty"`
	MRowsExaminedP99 float32 `protobuf:"fixed32,42,opt,name=m_rows_examined_p99,json=mRowsExaminedP99,proto3" json:"m_rows_examined_p99,omitempty"`
	MRowsAffectedCnt float32 `protobuf:"fixed32,43,opt,name=m_rows_affected_cnt,json=mRowsAffectedCnt,proto3" json:"m_rows_affected_cnt,omitempty"`
	// Number of rows changed - UPDATE, DELETE, INSERT.
	MRowsAffectedSum float32 `protobuf:"fixed32,44,opt,name=m_rows_affected_sum,json=mRowsAffectedSum,proto3" json:"m_rows_affected_sum,omitempty"`
	MRowsAffectedMin float32 `protobuf:"fixed32,45,opt,name=m_rows_affected_min,json=mRowsAffectedMin,proto3" json:"m_rows_affected_min,omitempty"`
	MRowsAffectedMax float32 `protobuf:"fixed32,46,opt,name=m_rows_affected_max,json=mRowsAffectedMax,proto3" json:"m_rows_affected_max,omitempty"`
	MRowsAffectedP99 float32 `protobuf:"fixed32,47,opt,name=m_rows_affected_p99,json=mRowsAffectedP99,proto3" json:"m_rows_affected_p99,omitempty"`
	MRowsReadCnt     float32 `protobuf:"fixed32,48,opt,name=m_rows_read_cnt,json=mRowsReadCnt,proto3" json:"m_rows_read_cnt,omitempty"`
	// The number of rows read from tables.
	MRowsReadSum    float32 `protobuf:"fixed32,49,opt,name=m_rows_read_sum,json=mRowsReadSum,proto3" json:"m_rows_read_sum,omitempty"`
	MRowsReadMin    float32 `protobuf:"fixed32,50,opt,name=m_rows_read_min,json=mRowsReadMin,proto3" json:"m_rows_read_min,omitempty"`
	MRowsReadMax    float32 `protobuf:"fixed32,51,opt,name=m_rows_read_max,json=mRowsReadMax,proto3" json:"m_rows_read_max,omitempty"`
	MRowsReadP99    float32 `protobuf:"fixed32,52,opt,name=m_rows_read_p99,json=mRowsReadP99,proto3" json:"m_rows_read_p99,omitempty"`
	MMergePassesCnt float32 `protobuf:"fixed32,53,opt,name=m_merge_passes_cnt,json=mMergePassesCnt,proto3" json:"m_merge_passes_cnt,omitempty"`
	// The number of merge passes that the sort algorithm has had to do.
	MMergePassesSum  float32 `protobuf:"fixed32,54,opt,name=m_merge_passes_sum,json=mMergePassesSum,proto3" json:"m_merge_passes_sum,omitempty"`
	MMergePassesMin  float32 `protobuf:"fixed32,55,opt,name=m_merge_passes_min,json=mMergePassesMin,proto3" json:"m_merge_passes_min,omitempty"`
	MMergePassesMax  float32 `protobuf:"fixed32,56,opt,name=m_merge_passes_max,json=mMergePassesMax,proto3" json:"m_merge_passes_max,omitempty"`
	MMergePassesP99  float32 `protobuf:"fixed32,57,opt,name=m_merge_passes_p99,json=mMergePassesP99,proto3" json:"m_merge_passes_p99,omitempty"`
	MInnodbIoROpsCnt float32 `protobuf:"fixed32,58,opt,name=m_innodb_io_r_ops_cnt,json=mInnodbIoROpsCnt,proto3" json:"m_innodb_io_r_ops_cnt,omitempty"`
	// Counts the number of page read operations scheduled.
	MInnodbIoROpsSum   float32 `protobuf:"fixed32,59,opt,name=m_innodb_io_r_ops_sum,json=mInnodbIoROpsSum,proto3" json:"m_innodb_io_r_ops_sum,omitempty"`
	MInnodbIoROpsMin   float32 `protobuf:"fixed32,60,opt,name=m_innodb_io_r_ops_min,json=mInnodbIoROpsMin,proto3" json:"m_innodb_io_r_ops_min,omitempty"`
	MInnodbIoROpsMax   float32 `protobuf:"fixed32,61,opt,name=m_innodb_io_r_ops_max,json=mInnodbIoROpsMax,proto3" json:"m_innodb_io_r_ops_max,omitempty"`
	MInnodbIoROpsP99   float32 `protobuf:"fixed32,62,opt,name=m_innodb_io_r_ops_p99,json=mInnodbIoROpsP99,proto3" json:"m_innodb_io_r_ops_p99,omitempty"`
	MInnodbIoRBytesCnt float32 `protobuf:"fixed32,63,opt,name=m_innodb_io_r_bytes_cnt,json=mInnodbIoRBytesCnt,proto3" json:"m_innodb_io_r_bytes_cnt,omitempty"`
	// Similar to innodb_IO_r_ops, but the unit is bytes.
	MInnodbIoRBytesSum float32 `protobuf:"fixed32,64,opt,name=m_innodb_io_r_bytes_sum,json=mInnodbIoRBytesSum,proto3" json:"m_innodb_io_r_bytes_sum,omitempty"`
	MInnodbIoRBytesMin float32 `protobuf:"fixed32,65,opt,name=m_innodb_io_r_bytes_min,json=mInnodbIoRBytesMin,proto3" json:"m_innodb_io_r_bytes_min,omitempty"`
	MInnodbIoRBytesMax float32 `protobuf:"fixed32,66,opt,name=m_innodb_io_r_bytes_max,json=mInnodbIoRBytesMax,proto3" json:"m_innodb_io_r_bytes_max,omitempty"`
	MInnodbIoRBytesP99 float32 `protobuf:"fixed32,67,opt,name=m_innodb_io_r_bytes_p99,json=mInnodbIoRBytesP99,proto3" json:"m_innodb_io_r_bytes_p99,omitempty"`
	MInnodbIoRWaitCnt  float32 `protobuf:"fixed32,68,opt,name=m_innodb_io_r_wait_cnt,json=mInnodbIoRWaitCnt,proto3" json:"m_innodb_io_r_wait_cnt,omitempty"`
	// Shows how long (in seconds) it took InnoDB to actually read the data from storage.
	MInnodbIoRWaitSum     float32 `protobuf:"fixed32,69,opt,name=m_innodb_io_r_wait_sum,json=mInnodbIoRWaitSum,proto3" json:"m_innodb_io_r_wait_sum,omitempty"`
	MInnodbIoRWaitMin     float32 `protobuf:"fixed32,70,opt,name=m_innodb_io_r_wait_min,json=mInnodbIoRWaitMin,proto3" json:"m_innodb_io_r_wait_min,omitempty"`
	MInnodbIoRWaitMax     float32 `protobuf:"fixed32,71,opt,name=m_innodb_io_r_wait_max,json=mInnodbIoRWaitMax,proto3" json:"m_innodb_io_r_wait_max,omitempty"`
	MInnodbIoRWaitP99     float32 `protobuf:"fixed32,72,opt,name=m_innodb_io_r_wait_p99,json=mInnodbIoRWaitP99,proto3" json:"m_innodb_io_r_wait_p99,omitempty"`
	MInnodbRecLockWaitCnt float32 `protobuf:"fixed32,73,opt,name=m_innodb_rec_lock_wait_cnt,json=mInnodbRecLockWaitCnt,proto3" json:"m_innodb_rec_lock_wait_cnt,omitempty"`
	// Shows how long (in seconds) the query waited for row locks.
	MInnodbRecLockWaitSum float32 `protobuf:"fixed32,74,opt,name=m_innodb_rec_lock_wait_sum,json=mInnodbRecLockWaitSum,proto3" json:"m_innodb_rec_lock_wait_sum,omitempty"`
	MInnodbRecLockWaitMin float32 `protobuf:"fixed32,75,opt,name=m_innodb_rec_lock_wait_min,json=mInnodbRecLockWaitMin,proto3" json:"m_innodb_rec_lock_wait_min,omitempty"`
	MInnodbRecLockWaitMax float32 `protobuf:"fixed32,76,opt,name=m_innodb_rec_lock_wait_max,json=mInnodbRecLockWaitMax,proto3" json:"m_innodb_rec_lock_wait_max,omitempty"`
	MInnodbRecLockWaitP99 float32 `protobuf:"fixed32,77,opt,name=m_innodb_rec_lock_wait_p99,json=mInnodbRecLockWaitP99,proto3" json:"m_innodb_rec_lock_wait_p99,omitempty"`
	MInnodbQueueWaitCnt   float32 `protobuf:"fixed32,78,opt,name=m_innodb_queue_wait_cnt,json=mInnodbQueueWaitCnt,proto3" json:"m_innodb_queue_wait_cnt,omitempty"`
	// Shows how long (in seconds) the query spent either waiting to enter the InnoDB queue or inside that queue waiting for execution.
	MInnodbQueueWaitSum     float32 `protobuf:"fixed32,79,opt,name=m_innodb_queue_wait_sum,json=mInnodbQueueWaitSum,proto3" json:"m_innodb_queue_wait_sum,omitempty"`
	MInnodbQueueWaitMin     float32 `protobuf:"fixed32,80,opt,name=m_innodb_queue_wait_min,json=mInnodbQueueWaitMin,proto3" json:"m_innodb_queue_wait_min,omitempty"`
	MInnodbQueueWaitMax     float32 `protobuf:"fixed32,81,opt,name=m_innodb_queue_wait_max,json=mInnodbQueueWaitMax,proto3" json:"m_innodb_queue_wait_max,omitempty"`
	MInnodbQueueWaitP99     float32 `protobuf:"fixed32,82,opt,name=m_innodb_queue_wait_p99,json=mInnodbQueueWaitP99,proto3" json:"m_innodb_queue_wait_p99,omitempty"`
	MInnodbPagesDistinctCnt float32 `protobuf:"fixed32,83,opt,name=m_innodb_pages_distinct_cnt,json=mInnodbPagesDistinctCnt,proto3" json:"m_innodb_pages_distinct_cnt,omitempty"`
	// Counts approximately the number of unique pages the query accessed.
	MInnodbPagesDistinctSum float32 `protobuf:"fixed32,84,opt,name=m_innodb_pages_distinct_sum,json=mInnodbPagesDistinctSum,proto3" json:"m_innodb_pages_distinct_sum,omitempty"`
	MInnodbPagesDistinctMin float32 `protobuf:"fixed32,85,opt,name=m_innodb_pages_distinct_min,json=mInnodbPagesDistinctMin,proto3" json:"m_innodb_pages_distinct_min,omitempty"`
	MInnodbPagesDistinctMax float32 `protobuf:"fixed32,86,opt,name=m_innodb_pages_distinct_max,json=mInnodbPagesDistinctMax,proto3" json:"m_innodb_pages_distinct_max,omitempty"`
	MInnodbPagesDistinctP99 float32 `protobuf:"fixed32,87,opt,name=m_innodb_pages_distinct_p99,json=mInnodbPagesDistinctP99,proto3" json:"m_innodb_pages_distinct_p99,omitempty"`
	MQueryLengthCnt         float32 `protobuf:"fixed32,88,opt,name=m_query_length_cnt,json=mQueryLengthCnt,proto3" json:"m_query_length_cnt,omitempty"`
	// Shows how long the query is.
	MQueryLengthSum float32 `protobuf:"fixed32,89,opt,name=m_query_length_sum,json=mQueryLengthSum,proto3" json:"m_query_length_sum,omitempty"`
	MQueryLengthMin float32 `protobuf:"fixed32,90,opt,name=m_query_length_min,json=mQueryLengthMin,proto3" json:"m_query_length_min,omitempty"`
	MQueryLengthMax float32 `protobuf:"fixed32,91,opt,name=m_query_length_max,json=mQueryLengthMax,proto3" json:"m_query_length_max,omitempty"`
	MQueryLengthP99 float32 `protobuf:"fixed32,92,opt,name=m_query_length_p99,json=mQueryLengthP99,proto3" json:"m_query_length_p99,omitempty"`
	MBytesSentCnt   float32 `protobuf:"fixed32,93,opt,name=m_bytes_sent_cnt,json=mBytesSentCnt,proto3" json:"m_bytes_sent_cnt,omitempty"`
	// The number of bytes sent to all clients.
	MBytesSentSum float32 `protobuf:"fixed32,94,opt,name=m_bytes_sent_sum,json=mBytesSentSum,proto3" json:"m_bytes_sent_sum,omitempty"`
	MBytesSentMin float32 `protobuf:"fixed32,95,opt,name=m_bytes_sent_min,json=mBytesSentMin,proto3" json:"m_bytes_sent_min,omitempty"`
	MBytesSentMax float32 `protobuf:"fixed32,96,opt,name=m_bytes_sent_max,json=mBytesSentMax,proto3" json:"m_bytes_sent_max,omitempty"`
	MBytesSentP99 float32 `protobuf:"fixed32,97,opt,name=m_bytes_sent_p99,json=mBytesSentP99,proto3" json:"m_bytes_sent_p99,omitempty"`
	MTmpTablesCnt float32 `protobuf:"fixed32,98,opt,name=m_tmp_tables_cnt,json=mTmpTablesCnt,proto3" json:"m_tmp_tables_cnt,omitempty"`
	// Number of temporary tables created on memory for the query.
	MTmpTablesSum     float32 `protobuf:"fixed32,99,opt,name=m_tmp_tables_sum,json=mTmpTablesSum,proto3" json:"m_tmp_tables_sum,omitempty"`
	MTmpTablesMin     float32 `protobuf:"fixed32,100,opt,name=m_tmp_tables_min,json=mTmpTablesMin,proto3" json:"m_tmp_tables_min,omitempty"`
	MTmpTablesMax     float32 `protobuf:"fixed32,101,opt,name=m_tmp_tables_max,json=mTmpTablesMax,proto3" json:"m_tmp_tables_max,omitempty"`
	MTmpTablesP99     float32 `protobuf:"fixed32,102,opt,name=m_tmp_tables_p99,json=mTmpTablesP99,proto3" json:"m_tmp_tables_p99,omitempty"`
	MTmpDiskTablesCnt float32 `protobuf:"fixed32,103,opt,name=m_tmp_disk_tables_cnt,json=mTmpDiskTablesCnt,proto3" json:"m_tmp_disk_tables_cnt,omitempty"`
	// Number of temporary tables created on disk for the query.
	MTmpDiskTablesSum float32 `protobuf:"fixed32,104,opt,name=m_tmp_disk_tables_sum,json=mTmpDiskTablesSum,proto3" json:"m_tmp_disk_tables_sum,omitempty"`
	MTmpDiskTablesMin float32 `protobuf:"fixed32,105,opt,name=m_tmp_disk_tables_min,json=mTmpDiskTablesMin,proto3" json:"m_tmp_disk_tables_min,omitempty"`
	MTmpDiskTablesMax float32 `protobuf:"fixed32,106,opt,name=m_tmp_disk_tables_max,json=mTmpDiskTablesMax,proto3" json:"m_tmp_disk_tables_max,omitempty"`
	MTmpDiskTablesP99 float32 `protobuf:"fixed32,107,opt,name=m_tmp_disk_tables_p99,json=mTmpDiskTablesP99,proto3" json:"m_tmp_disk_tables_p99,omitempty"`
	MTmpTableSizesCnt float32 `protobuf:"fixed32,108,opt,name=m_tmp_table_sizes_cnt,json=mTmpTableSizesCnt,proto3" json:"m_tmp_table_sizes_cnt,omitempty"`
	// Total Size in bytes for all temporary tables used in the query.
	MTmpTableSizesSum float32 `protobuf:"fixed32,109,opt,name=m_tmp_table_sizes_sum,json=mTmpTableSizesSum,proto3" json:"m_tmp_table_sizes_sum,omitempty"`
	MTmpTableSizesMin float32 `protobuf:"fixed32,110,opt,name=m_tmp_table_sizes_min,json=mTmpTableSizesMin,proto3" json:"m_tmp_table_sizes_min,omitempty"`
	MTmpTableSizesMax float32 `protobuf:"fixed32,111,opt,name=m_tmp_table_sizes_max,json=mTmpTableSizesMax,proto3" json:"m_tmp_table_sizes_max,omitempty"`
	MTmpTableSizesP99 float32 `protobuf:"fixed32,112,opt,name=m_tmp_table_sizes_p99,json=mTmpTableSizesP99,proto3" json:"m_tmp_table_sizes_p99,omitempty"`
	//
	// Boolean metrics:
	// - *_cnt - how many times this matric was met.
	// - *_sum - how many times this matric was true.
	//
	MQcHitCnt float32 `protobuf:"fixed32,113,opt,name=m_qc_hit_cnt,json=mQcHitCnt,proto3" json:"m_qc_hit_cnt,omitempty"`
	// Query Cache hits.
	MQcHitSum    float32 `protobuf:"fixed32,114,opt,name=m_qc_hit_sum,json=mQcHitSum,proto3" json:"m_qc_hit_sum,omitempty"`
	MFullScanCnt float32 `protobuf:"fixed32,115,opt,name=m_full_scan_cnt,json=mFullScanCnt,proto3" json:"m_full_scan_cnt,omitempty"`
	// The query performed a full table scan.
	MFullScanSum float32 `protobuf:"fixed32,116,opt,name=m_full_scan_sum,json=mFullScanSum,proto3" json:"m_full_scan_sum,omitempty"`
	MFullJoinCnt float32 `protobuf:"fixed32,117,opt,name=m_full_join_cnt,json=mFullJoinCnt,proto3" json:"m_full_join_cnt,omitempty"`
	// The query performed a full join (a join without indexes).
	MFullJoinSum float32 `protobuf:"fixed32,118,opt,name=m_full_join_sum,json=mFullJoinSum,proto3" json:"m_full_join_sum,omitempty"`
	MTmpTableCnt float32 `protobuf:"fixed32,119,opt,name=m_tmp_table_cnt,json=mTmpTableCnt,proto3" json:"m_tmp_table_cnt,omitempty"`
	// The query created an implicit internal temporary table.
	MTmpTableSum       float32 `protobuf:"fixed32,120,opt,name=m_tmp_table_sum,json=mTmpTableSum,proto3" json:"m_tmp_table_sum,omitempty"`
	MTmpTableOnDiskCnt float32 `protobuf:"fixed32,121,opt,name=m_tmp_table_on_disk_cnt,json=mTmpTableOnDiskCnt,proto3" json:"m_tmp_table_on_disk_cnt,omitempty"`
	// The querys temporary table was stored on disk.
	MTmpTableOnDiskSum float32 `protobuf:"fixed32,122,opt,name=m_tmp_table_on_disk_sum,json=mTmpTableOnDiskSum,proto3" json:"m_tmp_table_on_disk_sum,omitempty"`
	MFilesortCnt       float32 `protobuf:"fixed32,123,opt,name=m_filesort_cnt,json=mFilesortCnt,proto3" json:"m_filesort_cnt,omitempty"`
	// The query used a filesort.
	MFilesortSum       float32 `protobuf:"fixed32,124,opt,name=m_filesort_sum,json=mFilesortSum,proto3" json:"m_filesort_sum,omitempty"`
	MFilesortOnDiskCnt float32 `protobuf:"fixed32,125,opt,name=m_filesort_on_disk_cnt,json=mFilesortOnDiskCnt,proto3" json:"m_filesort_on_disk_cnt,omitempty"`
	// The filesort was performed on disk.
	MFilesortOnDiskSum      float32 `protobuf:"fixed32,126,opt,name=m_filesort_on_disk_sum,json=mFilesortOnDiskSum,proto3" json:"m_filesort_on_disk_sum,omitempty"`
	MSelectFullRangeJoinCnt float32 `protobuf:"fixed32,127,opt,name=m_select_full_range_join_cnt,json=mSelectFullRangeJoinCnt,proto3" json:"m_select_full_range_join_cnt,omitempty"`
	// The number of joins that used a range search on a reference table.
	MSelectFullRangeJoinSum float32 `protobuf:"fixed32,128,opt,name=m_select_full_range_join_sum,json=mSelectFullRangeJoinSum,proto3" json:"m_select_full_range_join_sum,omitempty"`
	MSelectRangeCnt         float32 `protobuf:"fixed32,129,opt,name=m_select_range_cnt,json=mSelectRangeCnt,proto3" json:"m_select_range_cnt,omitempty"`
	// The number of joins that used ranges on the first table.
	MSelectRangeSum      float32 `protobuf:"fixed32,130,opt,name=m_select_range_sum,json=mSelectRangeSum,proto3" json:"m_select_range_sum,omitempty"`
	MSelectRangeCheckCnt float32 `protobuf:"fixed32,131,opt,name=m_select_range_check_cnt,json=mSelectRangeCheckCnt,proto3" json:"m_select_range_check_cnt,omitempty"`
	// The number of joins without keys that check for key usage after each row.
	MSelectRangeCheckSum float32 `protobuf:"fixed32,132,opt,name=m_select_range_check_sum,json=mSelectRangeCheckSum,proto3" json:"m_select_range_check_sum,omitempty"`
	MSortRangeCnt        float32 `protobuf:"fixed32,133,opt,name=m_sort_range_cnt,json=mSortRangeCnt,proto3" json:"m_sort_range_cnt,omitempty"`
	// The number of sorts that were done using ranges.
	MSortRangeSum float32 `protobuf:"fixed32,134,opt,name=m_sort_range_sum,json=mSortRangeSum,proto3" json:"m_sort_range_sum,omitempty"`
	MSortRowsCnt  float32 `protobuf:"fixed32,135,opt,name=m_sort_rows_cnt,json=mSortRowsCnt,proto3" json:"m_sort_rows_cnt,omitempty"`
	// The number of sorted rows.
	MSortRowsSum float32 `protobuf:"fixed32,136,opt,name=m_sort_rows_sum,json=mSortRowsSum,proto3" json:"m_sort_rows_sum,omitempty"`
	MSortScanCnt float32 `protobuf:"fixed32,137,opt,name=m_sort_scan_cnt,json=mSortScanCnt,proto3" json:"m_sort_scan_cnt,omitempty"`
	// The number of sorts that were done by scanning the table.
	MSortScanSum    float32 `protobuf:"fixed32,138,opt,name=m_sort_scan_sum,json=mSortScanSum,proto3" json:"m_sort_scan_sum,omitempty"`
	MNoIndexUsedCnt float32 `protobuf:"fixed32,139,opt,name=m_no_index_used_cnt,json=mNoIndexUsedCnt,proto3" json:"m_no_index_used_cnt,omitempty"`
	// The number of queries without index.
	MNoIndexUsedSum     float32 `protobuf:"fixed32,140,opt,name=m_no_index_used_sum,json=mNoIndexUsedSum,proto3" json:"m_no_index_used_sum,omitempty"`
	MNoGoodIndexUsedCnt float32 `protobuf:"fixed32,141,opt,name=m_no_good_index_used_cnt,json=mNoGoodIndexUsedCnt,proto3" json:"m_no_good_index_used_cnt,omitempty"`
	// The number of queries without good index.
	MNoGoodIndexUsedSum float32 `protobuf:"fixed32,142,opt,name=m_no_good_index_used_sum,json=mNoGoodIndexUsedSum,proto3" json:"m_no_good_index_used_sum,omitempty"`
	MDocsReturnedCnt    float32 `protobuf:"fixed32,143,opt,name=m_docs_returned_cnt,json=mDocsReturnedCnt,proto3" json:"m_docs_returned_cnt,omitempty"`
	// The number of returned documents.
	MDocsReturnedSum   float32 `protobuf:"fixed32,144,opt,name=m_docs_returned_sum,json=mDocsReturnedSum,proto3" json:"m_docs_returned_sum,omitempty"`
	MDocsReturnedMin   float32 `protobuf:"fixed32,145,opt,name=m_docs_returned_min,json=mDocsReturnedMin,proto3" json:"m_docs_returned_min,omitempty"`
	MDocsReturnedMax   float32 `protobuf:"fixed32,146,opt,name=m_docs_returned_max,json=mDocsReturnedMax,proto3" json:"m_docs_returned_max,omitempty"`
	MDocsReturnedP99   float32 `protobuf:"fixed32,147,opt,name=m_docs_returned_p99,json=mDocsReturnedP99,proto3" json:"m_docs_returned_p99,omitempty"`
	MResponseLengthCnt float32 `protobuf:"fixed32,148,opt,name=m_response_length_cnt,json=mResponseLengthCnt,proto3" json:"m_response_length_cnt,omitempty"`
	// The response length of the query result in bytes.
	MResponseLengthSum float32 `protobuf:"fixed32,149,opt,name=m_response_length_sum,json=mResponseLengthSum,proto3" json:"m_response_length_sum,omitempty"`
	MResponseLengthMin float32 `protobuf:"fixed32,150,opt,name=m_response_length_min,json=mResponseLengthMin,proto3" json:"m_response_length_min,omitempty"`
	MResponseLengthMax float32 `protobuf:"fixed32,151,opt,name=m_response_length_max,json=mResponseLengthMax,proto3" json:"m_response_length_max,omitempty"`
	MResponseLengthP99 float32 `protobuf:"fixed32,152,opt,name=m_response_length_p99,json=mResponseLengthP99,proto3" json:"m_response_length_p99,omitempty"`
	MDocsScannedCnt    float32 `protobuf:"fixed32,153,opt,name=m_docs_scanned_cnt,json=mDocsScannedCnt,proto3" json:"m_docs_scanned_cnt,omitempty"`
	// The number of scanned documents.
	MDocsScannedSum      float32  `protobuf:"fixed32,154,opt,name=m_docs_scanned_sum,json=mDocsScannedSum,proto3" json:"m_docs_scanned_sum,omitempty"`
	MDocsScannedMin      float32  `protobuf:"fixed32,155,opt,name=m_docs_scanned_min,json=mDocsScannedMin,proto3" json:"m_docs_scanned_min,omitempty"`
	MDocsScannedMax      float32  `protobuf:"fixed32,156,opt,name=m_docs_scanned_max,json=mDocsScannedMax,proto3" json:"m_docs_scanned_max,omitempty"`
	MDocsScannedP99      float32  `protobuf:"fixed32,157,opt,name=m_docs_scanned_p99,json=mDocsScannedP99,proto3" json:"m_docs_scanned_p99,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricsBucket) Reset()         { *m = MetricsBucket{} }
func (m *MetricsBucket) String() string { return proto.CompactTextString(m) }
func (*MetricsBucket) ProtoMessage()    {}
func (*MetricsBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_f08230f69f9090cc, []int{1}
}

func (m *MetricsBucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsBucket.Unmarshal(m, b)
}
func (m *MetricsBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsBucket.Marshal(b, m, deterministic)
}
func (m *MetricsBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsBucket.Merge(m, src)
}
func (m *MetricsBucket) XXX_Size() int {
	return xxx_messageInfo_MetricsBucket.Size(m)
}
func (m *MetricsBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsBucket.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsBucket proto.InternalMessageInfo

func (m *MetricsBucket) GetQueryid() string {
	if m != nil {
		return m.Queryid
	}
	return ""
}

func (m *MetricsBucket) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *MetricsBucket) GetDServer() string {
	if m != nil {
		return m.DServer
	}
	return ""
}

func (m *MetricsBucket) GetDDatabase() string {
	if m != nil {
		return m.DDatabase
	}
	return ""
}

func (m *MetricsBucket) GetDSchema() string {
	if m != nil {
		return m.DSchema
	}
	return ""
}

func (m *MetricsBucket) GetDUsername() string {
	if m != nil {
		return m.DUsername
	}
	return ""
}

func (m *MetricsBucket) GetDClientHost() string {
	if m != nil {
		return m.DClientHost
	}
	return ""
}

func (m *MetricsBucket) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricsBucket) GetAgentUuid() string {
	if m != nil {
		return m.AgentUuid
	}
	return ""
}

func (m *MetricsBucket) GetPeriodStartUnixSecs() uint32 {
	if m != nil {
		return m.PeriodStartUnixSecs
	}
	return 0
}

func (m *MetricsBucket) GetPeriodLengthSecs() uint32 {
	if m != nil {
		return m.PeriodLengthSecs
	}
	return 0
}

func (m *MetricsBucket) GetMetricsSource() MetricsSource {
	if m != nil {
		return m.MetricsSource
	}
	return MetricsSource_METRICS_SOURCE_INVALID
}

func (m *MetricsBucket) GetExample() string {
	if m != nil {
		return m.Example
	}
	return ""
}

func (m *MetricsBucket) GetExampleFormat() ExampleFormat {
	if m != nil {
		return m.ExampleFormat
	}
	return ExampleFormat_EXAMPLE_FORMAT_INVALID
}

func (m *MetricsBucket) GetIsTruncated() bool {
	if m != nil {
		return m.IsTruncated
	}
	return false
}

func (m *MetricsBucket) GetExampleType() ExampleType {
	if m != nil {
		return m.ExampleType
	}
	return ExampleType_EXAMPLE_TYPE_INVALID
}

func (m *MetricsBucket) GetExampleMetrics() string {
	if m != nil {
		return m.ExampleMetrics
	}
	return ""
}

func (m *MetricsBucket) GetNumQueriesWithWarnings() float32 {
	if m != nil {
		return m.NumQueriesWithWarnings
	}
	return 0
}

func (m *MetricsBucket) GetWarnings() map[uint64]uint64 {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *MetricsBucket) GetNumQueriesWithErrors() float32 {
	if m != nil {
		return m.NumQueriesWithErrors
	}
	return 0
}

func (m *MetricsBucket) GetErrors() map[uint64]uint64 {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *MetricsBucket) GetNumQueries() float32 {
	if m != nil {
		return m.NumQueries
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeCnt() float32 {
	if m != nil {
		return m.MQueryTimeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeSum() float32 {
	if m != nil {
		return m.MQueryTimeSum
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeMin() float32 {
	if m != nil {
		return m.MQueryTimeMin
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeMax() float32 {
	if m != nil {
		return m.MQueryTimeMax
	}
	return 0
}

func (m *MetricsBucket) GetMQueryTimeP99() float32 {
	if m != nil {
		return m.MQueryTimeP99
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeCnt() float32 {
	if m != nil {
		return m.MLockTimeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeSum() float32 {
	if m != nil {
		return m.MLockTimeSum
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeMin() float32 {
	if m != nil {
		return m.MLockTimeMin
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeMax() float32 {
	if m != nil {
		return m.MLockTimeMax
	}
	return 0
}

func (m *MetricsBucket) GetMLockTimeP99() float32 {
	if m != nil {
		return m.MLockTimeP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentCnt() float32 {
	if m != nil {
		return m.MRowsSentCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentSum() float32 {
	if m != nil {
		return m.MRowsSentSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentMin() float32 {
	if m != nil {
		return m.MRowsSentMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentMax() float32 {
	if m != nil {
		return m.MRowsSentMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsSentP99() float32 {
	if m != nil {
		return m.MRowsSentP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedCnt() float32 {
	if m != nil {
		return m.MRowsExaminedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedSum() float32 {
	if m != nil {
		return m.MRowsExaminedSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedMin() float32 {
	if m != nil {
		return m.MRowsExaminedMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedMax() float32 {
	if m != nil {
		return m.MRowsExaminedMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsExaminedP99() float32 {
	if m != nil {
		return m.MRowsExaminedP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedCnt() float32 {
	if m != nil {
		return m.MRowsAffectedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedSum() float32 {
	if m != nil {
		return m.MRowsAffectedSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedMin() float32 {
	if m != nil {
		return m.MRowsAffectedMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedMax() float32 {
	if m != nil {
		return m.MRowsAffectedMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsAffectedP99() float32 {
	if m != nil {
		return m.MRowsAffectedP99
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadCnt() float32 {
	if m != nil {
		return m.MRowsReadCnt
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadSum() float32 {
	if m != nil {
		return m.MRowsReadSum
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadMin() float32 {
	if m != nil {
		return m.MRowsReadMin
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadMax() float32 {
	if m != nil {
		return m.MRowsReadMax
	}
	return 0
}

func (m *MetricsBucket) GetMRowsReadP99() float32 {
	if m != nil {
		return m.MRowsReadP99
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesCnt() float32 {
	if m != nil {
		return m.MMergePassesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesSum() float32 {
	if m != nil {
		return m.MMergePassesSum
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesMin() float32 {
	if m != nil {
		return m.MMergePassesMin
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesMax() float32 {
	if m != nil {
		return m.MMergePassesMax
	}
	return 0
}

func (m *MetricsBucket) GetMMergePassesP99() float32 {
	if m != nil {
		return m.MMergePassesP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsCnt() float32 {
	if m != nil {
		return m.MInnodbIoROpsCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsSum() float32 {
	if m != nil {
		return m.MInnodbIoROpsSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsMin() float32 {
	if m != nil {
		return m.MInnodbIoROpsMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsMax() float32 {
	if m != nil {
		return m.MInnodbIoROpsMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoROpsP99() float32 {
	if m != nil {
		return m.MInnodbIoROpsP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesCnt() float32 {
	if m != nil {
		return m.MInnodbIoRBytesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesSum() float32 {
	if m != nil {
		return m.MInnodbIoRBytesSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesMin() float32 {
	if m != nil {
		return m.MInnodbIoRBytesMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesMax() float32 {
	if m != nil {
		return m.MInnodbIoRBytesMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRBytesP99() float32 {
	if m != nil {
		return m.MInnodbIoRBytesP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitCnt() float32 {
	if m != nil {
		return m.MInnodbIoRWaitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitSum() float32 {
	if m != nil {
		return m.MInnodbIoRWaitSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitMin() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitMax() float32 {
	if m != nil {
		return m.MInnodbIoRWaitMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbIoRWaitP99() float32 {
	if m != nil {
		return m.MInnodbIoRWaitP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitCnt() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitSum() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitMin() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitMax() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbRecLockWaitP99() float32 {
	if m != nil {
		return m.MInnodbRecLockWaitP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitCnt() float32 {
	if m != nil {
		return m.MInnodbQueueWaitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitSum() float32 {
	if m != nil {
		return m.MInnodbQueueWaitSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitMin() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitMax() float32 {
	if m != nil {
		return m.MInnodbQueueWaitMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbQueueWaitP99() float32 {
	if m != nil {
		return m.MInnodbQueueWaitP99
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctCnt() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctCnt
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctSum() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctSum
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctMin() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctMin
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctMax() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctMax
	}
	return 0
}

func (m *MetricsBucket) GetMInnodbPagesDistinctP99() float32 {
	if m != nil {
		return m.MInnodbPagesDistinctP99
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthCnt() float32 {
	if m != nil {
		return m.MQueryLengthCnt
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthSum() float32 {
	if m != nil {
		return m.MQueryLengthSum
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthMin() float32 {
	if m != nil {
		return m.MQueryLengthMin
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthMax() float32 {
	if m != nil {
		return m.MQueryLengthMax
	}
	return 0
}

func (m *MetricsBucket) GetMQueryLengthP99() float32 {
	if m != nil {
		return m.MQueryLengthP99
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentCnt() float32 {
	if m != nil {
		return m.MBytesSentCnt
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentSum() float32 {
	if m != nil {
		return m.MBytesSentSum
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentMin() float32 {
	if m != nil {
		return m.MBytesSentMin
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentMax() float32 {
	if m != nil {
		return m.MBytesSentMax
	}
	return 0
}

func (m *MetricsBucket) GetMBytesSentP99() float32 {
	if m != nil {
		return m.MBytesSentP99
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesCnt() float32 {
	if m != nil {
		return m.MTmpTablesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesSum() float32 {
	if m != nil {
		return m.MTmpTablesSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesMin() float32 {
	if m != nil {
		return m.MTmpTablesMin
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesMax() float32 {
	if m != nil {
		return m.MTmpTablesMax
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTablesP99() float32 {
	if m != nil {
		return m.MTmpTablesP99
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesCnt() float32 {
	if m != nil {
		return m.MTmpDiskTablesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesSum() float32 {
	if m != nil {
		return m.MTmpDiskTablesSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesMin() float32 {
	if m != nil {
		return m.MTmpDiskTablesMin
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesMax() float32 {
	if m != nil {
		return m.MTmpDiskTablesMax
	}
	return 0
}

func (m *MetricsBucket) GetMTmpDiskTablesP99() float32 {
	if m != nil {
		return m.MTmpDiskTablesP99
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesCnt() float32 {
	if m != nil {
		return m.MTmpTableSizesCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesSum() float32 {
	if m != nil {
		return m.MTmpTableSizesSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesMin() float32 {
	if m != nil {
		return m.MTmpTableSizesMin
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesMax() float32 {
	if m != nil {
		return m.MTmpTableSizesMax
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSizesP99() float32 {
	if m != nil {
		return m.MTmpTableSizesP99
	}
	return 0
}

func (m *MetricsBucket) GetMQcHitCnt() float32 {
	if m != nil {
		return m.MQcHitCnt
	}
	return 0
}

func (m *MetricsBucket) GetMQcHitSum() float32 {
	if m != nil {
		return m.MQcHitSum
	}
	return 0
}

func (m *MetricsBucket) GetMFullScanCnt() float32 {
	if m != nil {
		return m.MFullScanCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFullScanSum() float32 {
	if m != nil {
		return m.MFullScanSum
	}
	return 0
}

func (m *MetricsBucket) GetMFullJoinCnt() float32 {
	if m != nil {
		return m.MFullJoinCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFullJoinSum() float32 {
	if m != nil {
		return m.MFullJoinSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableCnt() float32 {
	if m != nil {
		return m.MTmpTableCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableSum() float32 {
	if m != nil {
		return m.MTmpTableSum
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableOnDiskCnt() float32 {
	if m != nil {
		return m.MTmpTableOnDiskCnt
	}
	return 0
}

func (m *MetricsBucket) GetMTmpTableOnDiskSum() float32 {
	if m != nil {
		return m.MTmpTableOnDiskSum
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortCnt() float32 {
	if m != nil {
		return m.MFilesortCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortSum() float32 {
	if m != nil {
		return m.MFilesortSum
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortOnDiskCnt() float32 {
	if m != nil {
		return m.MFilesortOnDiskCnt
	}
	return 0
}

func (m *MetricsBucket) GetMFilesortOnDiskSum() float32 {
	if m != nil {
		return m.MFilesortOnDiskSum
	}
	return 0
}

func (m *MetricsBucket) GetMSelectFullRangeJoinCnt() float32 {
	if m != nil {
		return m.MSelectFullRangeJoinCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSelectFullRangeJoinSum() float32 {
	if m != nil {
		return m.MSelectFullRangeJoinSum
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeCnt() float32 {
	if m != nil {
		return m.MSelectRangeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeSum() float32 {
	if m != nil {
		return m.MSelectRangeSum
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeCheckCnt() float32 {
	if m != nil {
		return m.MSelectRangeCheckCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSelectRangeCheckSum() float32 {
	if m != nil {
		return m.MSelectRangeCheckSum
	}
	return 0
}

func (m *MetricsBucket) GetMSortRangeCnt() float32 {
	if m != nil {
		return m.MSortRangeCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSortRangeSum() float32 {
	if m != nil {
		return m.MSortRangeSum
	}
	return 0
}

func (m *MetricsBucket) GetMSortRowsCnt() float32 {
	if m != nil {
		return m.MSortRowsCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSortRowsSum() float32 {
	if m != nil {
		return m.MSortRowsSum
	}
	return 0
}

func (m *MetricsBucket) GetMSortScanCnt() float32 {
	if m != nil {
		return m.MSortScanCnt
	}
	return 0
}

func (m *MetricsBucket) GetMSortScanSum() float32 {
	if m != nil {
		return m.MSortScanSum
	}
	return 0
}

func (m *MetricsBucket) GetMNoIndexUsedCnt() float32 {
	if m != nil {
		return m.MNoIndexUsedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMNoIndexUsedSum() float32 {
	if m != nil {
		return m.MNoIndexUsedSum
	}
	return 0
}

func (m *MetricsBucket) GetMNoGoodIndexUsedCnt() float32 {
	if m != nil {
		return m.MNoGoodIndexUsedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMNoGoodIndexUsedSum() float32 {
	if m != nil {
		return m.MNoGoodIndexUsedSum
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedCnt() float32 {
	if m != nil {
		return m.MDocsReturnedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedSum() float32 {
	if m != nil {
		return m.MDocsReturnedSum
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedMin() float32 {
	if m != nil {
		return m.MDocsReturnedMin
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedMax() float32 {
	if m != nil {
		return m.MDocsReturnedMax
	}
	return 0
}

func (m *MetricsBucket) GetMDocsReturnedP99() float32 {
	if m != nil {
		return m.MDocsReturnedP99
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthCnt() float32 {
	if m != nil {
		return m.MResponseLengthCnt
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthSum() float32 {
	if m != nil {
		return m.MResponseLengthSum
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthMin() float32 {
	if m != nil {
		return m.MResponseLengthMin
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthMax() float32 {
	if m != nil {
		return m.MResponseLengthMax
	}
	return 0
}

func (m *MetricsBucket) GetMResponseLengthP99() float32 {
	if m != nil {
		return m.MResponseLengthP99
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedCnt() float32 {
	if m != nil {
		return m.MDocsScannedCnt
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedSum() float32 {
	if m != nil {
		return m.MDocsScannedSum
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedMin() float32 {
	if m != nil {
		return m.MDocsScannedMin
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedMax() float32 {
	if m != nil {
		return m.MDocsScannedMax
	}
	return 0
}

func (m *MetricsBucket) GetMDocsScannedP99() float32 {
	if m != nil {
		return m.MDocsScannedP99
	}
	return 0
}

type CollectResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectResponse) Reset()         { *m = CollectResponse{} }
func (m *CollectResponse) String() string { return proto.CompactTextString(m) }
func (*CollectResponse) ProtoMessage()    {}
func (*CollectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f08230f69f9090cc, []int{2}
}

func (m *CollectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectResponse.Unmarshal(m, b)
}
func (m *CollectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectResponse.Marshal(b, m, deterministic)
}
func (m *CollectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectResponse.Merge(m, src)
}
func (m *CollectResponse) XXX_Size() int {
	return xxx_messageInfo_CollectResponse.Size(m)
}
func (m *CollectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CollectResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("qan.MetricsSource", MetricsSource_name, MetricsSource_value)
	proto.RegisterType((*CollectRequest)(nil), "qan.CollectRequest")
	proto.RegisterType((*MetricsBucket)(nil), "qan.MetricsBucket")
	proto.RegisterMapType((map[uint64]uint64)(nil), "qan.MetricsBucket.ErrorsEntry")
	proto.RegisterMapType((map[string]string)(nil), "qan.MetricsBucket.LabelsEntry")
	proto.RegisterMapType((map[uint64]uint64)(nil), "qan.MetricsBucket.WarningsEntry")
	proto.RegisterType((*CollectResponse)(nil), "qan.CollectResponse")
}

func init() { proto.RegisterFile("qanpb/collector.proto", fileDescriptor_f08230f69f9090cc) }

var fileDescriptor_f08230f69f9090cc = []byte{
	// 2381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x99, 0xf9, 0x5b, 0xdb, 0x46,
	0xfe, 0xc7, 0xbf, 0xce, 0x9d, 0x21, 0x04, 0x47, 0x21, 0xc9, 0x84, 0x1e, 0x71, 0x69, 0xda, 0xf0,
	0x6d, 0x13, 0x68, 0x93, 0x34, 0xad, 0xd3, 0xb4, 0xbb, 0x04, 0x9c, 0x84, 0x16, 0x02, 0xc8, 0x50,
	0xb6, 0xdd, 0x43, 0x3b, 0x48, 0x83, 0x51, 0xb0, 0x24, 0xa3, 0x23, 0x88, 0xee, 0x7d, 0xdf, 0x57,
	0xf7, 0xbe, 0xfe, 0x98, 0xfd, 0xcf, 0xf6, 0x79, 0xcf, 0x8c, 0x64, 0x49, 0x1e, 0xf1, 0x3c, 0xfb,
	0x1b, 0xd2, 0xbc, 0x5e, 0x9f, 0xf1, 0xfb, 0xa3, 0xc1, 0x23, 0x59, 0xe4, 0xd2, 0x3e, 0xf3, 0x07,
	0xdb, 0x73, 0x76, 0xd0, 0xef, 0x73, 0x3b, 0x0e, 0xc2, 0xd9, 0x41, 0x18, 0xc4, 0x81, 0x71, 0x7c,
	0x9f, 0xf9, 0x53, 0x37, 0xc5, 0xdf, 0xf6, 0xad, 0x1e, 0xf7, 0x6f, 0x45, 0x07, 0xac, 0xd7, 0xe3,
	0xe1, 0x5c, 0x30, 0x88, 0xdd, 0xc0, 0x8f, 0xe6, 0x98, 0xef, 0x07, 0x31, 0x13, 0x7f, 0x4b, 0x65,
	0x6a, 0x42, 0x56, 0xda, 0x67, 0xbe, 0x3c, 0x31, 0xfd, 0x31, 0x39, 0xbf, 0x20, 0xcb, 0x9a, 0x7c,
	0x3f, 0xe1, 0x51, 0x6c, 0xb4, 0xc9, 0x79, 0x8f, 0xc7, 0xa1, 0x6b, 0x47, 0xd6, 0x76, 0x62, 0xef,
	0xf1, 0x98, 0x36, 0x5a, 0xc7, 0x67, 0xc6, 0x6e, 0x1b, 0xb3, 0xb0, 0x56, 0xe4, 0xd0, 0x43, 0x31,
	0x62, 0x8e, 0x7b, 0xc5, 0xc3, 0xe9, 0xff, 0xdc, 0x27, 0xe3, 0x25, 0xc0, 0xa0, 0xe4, 0xf4, 0x7e,
	0xc2, 0xc3, 0x43, 0xd7, 0xa1, 0x8d, 0x56, 0x63, 0xe6, 0xac, 0x99, 0x1d, 0x1a, 0x2d, 0x32, 0xb6,
	0xe3, 0xfa, 0x3d, 0x1e, 0x0e, 0x42, 0xd7, 0x8f, 0xe9, 0x31, 0x31, 0x5a, 0x3c, 0x65, 0x5c, 0x25,
	0x67, 0x1c, 0x2b, 0xe2, 0xe1, 0x73, 0x1e, 0xd2, 0xe3, 0x52, 0x76, 0xba, 0xe2, 0xd0, 0x78, 0x89,
	0x10, 0xc7, 0x72, 0x58, 0xcc, 0xb6, 0x59, 0xc4, 0xe9, 0x09, 0x31, 0x78, 0xd6, 0x59, 0x54, 0x27,
	0x94, 0x69, 0xef, 0x72, 0x8f, 0xd1, 0x93, 0x99, 0x29, 0x0e, 0xa5, 0x99, 0x44, 0x3c, 0xf4, 0x99,
	0xc7, 0xe9, 0x29, 0x65, 0x6e, 0xaa, 0x13, 0xc6, 0x34, 0x19, 0x77, 0x2c, 0xbb, 0xef, 0x72, 0x3f,
	0xb6, 0x76, 0x83, 0x28, 0xa6, 0xa7, 0xe5, 0xe7, 0x72, 0x16, 0xc4, 0xb9, 0x27, 0x41, 0x14, 0x1b,
	0xf7, 0xc8, 0xa9, 0x3e, 0xdb, 0xe6, 0xfd, 0x88, 0x9e, 0x11, 0x8d, 0x79, 0x79, 0xb4, 0x31, 0xb3,
	0xcb, 0x02, 0xe8, 0xf8, 0x71, 0x78, 0x68, 0x2a, 0x1a, 0x53, 0xb3, 0x1e, 0x0a, 0x27, 0x89, 0xeb,
	0xd0, 0xb3, 0x72, 0x6a, 0x71, 0x66, 0x33, 0x71, 0x1d, 0xe3, 0x0e, 0xb9, 0x3c, 0xe0, 0xa1, 0x1b,
	0x38, 0x56, 0x14, 0xb3, 0x30, 0xb6, 0x12, 0xdf, 0x4d, 0xad, 0x88, 0xdb, 0x11, 0x25, 0xad, 0xc6,
	0xcc, 0xb8, 0x79, 0x51, 0x8e, 0x76, 0x31, 0xb8, 0xe9, 0xbb, 0x69, 0x97, 0xdb, 0x91, 0x71, 0x93,
	0x18, 0x4a, 0xea, 0x73, 0xbf, 0x17, 0xef, 0x4a, 0x61, 0x4c, 0x08, 0x4d, 0x39, 0xb2, 0x2c, 0x06,
	0x04, 0x5d, 0xb8, 0xb4, 0x51, 0x90, 0x84, 0x36, 0xa7, 0xe7, 0x5a, 0x8d, 0x99, 0xf3, 0xe5, 0x4b,
	0xdb, 0x15, 0x23, 0xf9, 0xa5, 0x95, 0x87, 0xb8, 0x90, 0x3c, 0x65, 0xde, 0xa0, 0xcf, 0xe9, 0xb8,
	0xec, 0xa8, 0x3a, 0x44, 0x51, 0xf5, 0xa7, 0xb5, 0x13, 0x84, 0x1e, 0x8b, 0xe9, 0xf9, 0x42, 0xd1,
	0x8e, 0x1c, 0x7a, 0x24, 0x46, 0xcc, 0x71, 0x5e, 0x3c, 0x34, 0x5e, 0x21, 0xe7, 0xdc, 0xc8, 0x8a,
	0xc3, 0xc4, 0xb7, 0x59, 0xcc, 0x1d, 0x3a, 0xd1, 0x6a, 0xcc, 0x9c, 0x31, 0xc7, 0xdc, 0x68, 0x23,
	0x3b, 0x65, 0xdc, 0x21, 0xe7, 0xb2, 0xea, 0xf1, 0xe1, 0x80, 0xd3, 0xa6, 0xa8, 0xdd, 0x2c, 0xd6,
	0xde, 0x38, 0x1c, 0x70, 0x73, 0x8c, 0x0f, 0x0f, 0x8c, 0x1b, 0x64, 0x22, 0x93, 0x54, 0x0a, 0x7a,
	0x41, 0x7c, 0xe8, 0xec, 0x93, 0xaa, 0xa8, 0x46, 0x9b, 0x5c, 0xf5, 0x13, 0xcf, 0xc2, 0x9a, 0x74,
	0x79, 0x64, 0x1d, 0xb8, 0xf1, 0xae, 0x75, 0xc0, 0x42, 0xdf, 0xf5, 0x7b, 0x11, 0x35, 0x5a, 0x8d,
	0x99, 0x63, 0xe6, 0x65, 0x3f, 0xf1, 0xd6, 0xe5, 0xf8, 0x96, 0x1b, 0xef, 0x6e, 0xa9, 0x51, 0xe3,
	0x01, 0x39, 0x93, 0x93, 0x17, 0xc5, 0x3a, 0x68, 0x69, 0xd6, 0x41, 0x86, 0xcb, 0x95, 0x90, 0x1b,
	0xc6, 0x3b, 0xe4, 0xca, 0xc8, 0xc4, 0x3c, 0x0c, 0x83, 0x30, 0xa2, 0x93, 0x62, 0xda, 0xc9, 0xf2,
	0xb4, 0x1d, 0x31, 0x86, 0xa5, 0xa7, 0xa8, 0x4b, 0xb5, 0x4b, 0x4f, 0xa2, 0x6a, 0xe9, 0x49, 0xda,
	0xb8, 0x46, 0xc6, 0x0a, 0xd3, 0xd1, 0xcb, 0x62, 0x0a, 0x32, 0x9c, 0xc2, 0xb8, 0x41, 0x9a, 0x72,
	0xf8, 0xd0, 0x8a, 0x5d, 0x8f, 0x5b, 0xb6, 0x1f, 0xd3, 0x2b, 0x82, 0x1a, 0x17, 0xcc, 0xe1, 0x86,
	0xeb, 0xf1, 0x05, 0x3f, 0x1e, 0x01, 0xa3, 0xc4, 0xa3, 0xb4, 0x0a, 0x76, 0x13, 0x6f, 0x04, 0xf4,
	0x5c, 0x9f, 0x5e, 0xad, 0x82, 0x2b, 0xae, 0x3f, 0x0a, 0xb2, 0x94, 0x4e, 0x8d, 0x80, 0x2c, 0x1d,
	0x01, 0x07, 0xed, 0x36, 0x7d, 0xa1, 0x0a, 0xae, 0xb5, 0xdb, 0xc6, 0x6b, 0x64, 0xc2, 0xb3, 0xfa,
	0x81, 0xbd, 0x37, 0xcc, 0xf2, 0xa2, 0xe0, 0xce, 0x79, 0xcb, 0x81, 0xbd, 0x97, 0x45, 0xa9, 0x60,
	0x48, 0xf2, 0x52, 0x05, 0x43, 0x90, 0x0a, 0x86, 0x1c, 0x2f, 0x57, 0x30, 0xc4, 0xa8, 0x62, 0x2c,
	0xa5, 0xd7, 0xaa, 0x18, 0x4b, 0xab, 0x18, 0x32, 0xb4, 0x2a, 0x58, 0x1e, 0x21, 0x0c, 0x0e, 0x22,
	0x2b, 0xc2, 0x37, 0x06, 0x22, 0xbc, 0xa2, 0x30, 0x33, 0x38, 0x88, 0xba, 0xdc, 0x8f, 0xf3, 0x08,
	0x43, 0x0c, 0x11, 0xa6, 0x2b, 0x58, 0x1e, 0x61, 0x88, 0x21, 0xc2, 0xab, 0x15, 0x2c, 0x8f, 0x50,
	0xc0, 0x58, 0x4a, 0xaf, 0x57, 0xb1, 0x2c, 0xc2, 0x10, 0x43, 0x84, 0xd7, 0x2a, 0x18, 0x22, 0xdc,
	0x22, 0x17, 0x15, 0x86, 0x7f, 0x3a, 0xd7, 0xe7, 0x8e, 0x88, 0xf1, 0xba, 0x40, 0x9b, 0x02, 0xed,
	0xa8, 0x01, 0x44, 0xd1, 0xe0, 0x88, 0x73, 0x43, 0x83, 0x23, 0x92, 0x06, 0x47, 0xac, 0x19, 0x0d,
	0x8e, 0x68, 0x3a, 0x9c, 0xa5, 0xf4, 0xff, 0x75, 0x38, 0x4b, 0x75, 0x38, 0x62, 0xbe, 0xa1, 0xc1,
	0xcb, 0x51, 0xd9, 0xce, 0x0e, 0xb7, 0x63, 0x15, 0xf5, 0xcd, 0x02, 0x3e, 0xaf, 0x06, 0xca, 0x51,
	0x73, 0x1c, 0x51, 0x6f, 0x6a, 0xf0, 0x72, 0xd4, 0x1c, 0x47, 0xd4, 0x5b, 0x1a, 0xbc, 0x1c, 0x75,
	0x88, 0xb3, 0x94, 0xce, 0xea, 0xf0, 0x52, 0xd4, 0x1c, 0x47, 0xd4, 0x39, 0x0d, 0x5e, 0x5e, 0x98,
	0x21, 0x67, 0x32, 0xe6, 0x5b, 0x85, 0x8b, 0x6f, 0x72, 0xe6, 0x94, 0x17, 0xa6, 0xc0, 0x10, 0xef,
	0xed, 0x0a, 0x56, 0x5e, 0x98, 0x02, 0x43, 0xac, 0xdb, 0x15, 0xac, 0xbc, 0x30, 0x25, 0xc6, 0x52,
	0x7a, 0xa7, 0x8a, 0x95, 0x16, 0xa6, 0xc0, 0x10, 0xe3, 0x6e, 0x05, 0x43, 0x84, 0x37, 0x89, 0xe1,
	0x59, 0x1e, 0x0f, 0x7b, 0xdc, 0x1a, 0xb0, 0x28, 0xe2, 0x91, 0x48, 0xf1, 0x8e, 0x20, 0x27, 0xbc,
	0x15, 0x0c, 0xac, 0x89, 0xf3, 0x08, 0x32, 0x0a, 0x23, 0xcb, 0xbd, 0x51, 0x18, 0x71, 0x46, 0x61,
	0x24, 0x7a, 0x77, 0x14, 0x46, 0x28, 0x0d, 0xcc, 0x52, 0xfa, 0x9e, 0x06, 0x66, 0xa9, 0x06, 0x46,
	0xba, 0xf6, 0x28, 0x8c, 0x80, 0x73, 0xe4, 0x92, 0x67, 0xb9, 0xbe, 0x1f, 0x38, 0xdb, 0x96, 0x1b,
	0x58, 0xa1, 0x15, 0x0c, 0x64, 0xc6, 0xfb, 0xea, 0xa2, 0x2e, 0x89, 0xb1, 0xa5, 0xc0, 0x5c, 0x1d,
	0x88, 0x90, 0x5a, 0x01, 0x39, 0xdf, 0xd7, 0x08, 0x08, 0xaa, 0x15, 0x90, 0xf5, 0x81, 0x46, 0x40,
	0x58, 0xbd, 0xc0, 0x52, 0xfa, 0x81, 0x4e, 0x60, 0xa9, 0x5e, 0x40, 0xe6, 0x0f, 0x35, 0x02, 0x42,
	0xdf, 0x21, 0x57, 0xca, 0xc2, 0xf6, 0x61, 0xac, 0x2e, 0xed, 0x97, 0x84, 0x62, 0x0c, 0x95, 0x87,
	0x18, 0x42, 0xf0, 0x1a, 0x09, 0xd1, 0xbf, 0xac, 0x95, 0x10, 0xbe, 0x46, 0x42, 0xfc, 0x79, 0xad,
	0x84, 0x06, 0xd4, 0x49, 0x2c, 0xa5, 0x0f, 0xf5, 0x12, 0x4b, 0xeb, 0x24, 0xb4, 0x61, 0x41, 0x2b,
	0xa1, 0x11, 0x6f, 0x93, 0xcb, 0x65, 0xe9, 0x80, 0xb9, 0x72, 0x07, 0x59, 0x14, 0xce, 0x85, 0xa1,
	0xb3, 0xc5, 0x5c, 0xb1, 0x8d, 0xe8, 0x15, 0x74, 0xa1, 0xa3, 0x53, 0xd0, 0x04, 0xbd, 0x82, 0x1e,
	0x3c, 0xd2, 0x29, 0x68, 0x41, 0x8d, 0xc2, 0x52, 0xfa, 0x58, 0xab, 0xb0, 0xb4, 0x46, 0x41, 0xfe,
	0x27, 0x3a, 0x05, 0xf1, 0xdb, 0x64, 0x2a, 0x57, 0x42, 0x6e, 0xcb, 0xbd, 0x36, 0x6f, 0xc1, 0x92,
	0xd0, 0x2e, 0x29, 0xcd, 0xe4, 0x36, 0x36, 0xdd, 0xac, 0x0d, 0xf5, 0x2a, 0x5a, 0xf1, 0x51, 0x9d,
	0x8a, 0x76, 0xd4, 0xab, 0x68, 0xc9, 0xc7, 0x75, 0x2a, 0xda, 0x72, 0x84, 0xca, 0x52, 0xba, 0x5c,
	0xab, 0xb2, 0xf4, 0x08, 0x15, 0x2d, 0x5a, 0xa9, 0x53, 0xd1, 0xa6, 0xbb, 0x85, 0xa5, 0xb5, 0x9f,
	0xf0, 0x84, 0x0f, 0x7b, 0xf4, 0x54, 0x78, 0x17, 0x95, 0xb7, 0x8e, 0xc1, 0xac, 0x43, 0x35, 0x16,
	0xda, 0xb3, 0xaa, 0xb7, 0xd0, 0x9c, 0x1a, 0x0b, 0x9d, 0x59, 0xd3, 0x5b, 0xe8, 0x4b, 0x9d, 0xc5,
	0x52, 0xba, 0x5e, 0x63, 0xb1, 0xb4, 0xce, 0x42, 0x3f, 0x4c, 0xbd, 0x85, 0x6e, 0x3c, 0x20, 0x2f,
	0xe4, 0xd6, 0x80, 0xf5, 0x78, 0x64, 0x39, 0x6e, 0x14, 0xbb, 0xbe, 0x2d, 0x3b, 0xd2, 0x15, 0xe6,
	0x15, 0x65, 0xae, 0x01, 0x58, 0x54, 0xe3, 0xe8, 0xca, 0x11, 0x36, 0x3a, 0xb3, 0x51, 0x6f, 0xa3,
	0x3b, 0x47, 0xd8, 0xe8, 0xd0, 0x66, 0xbd, 0x8d, 0x2e, 0x1d, 0x65, 0xb3, 0x94, 0x7e, 0x72, 0x84,
	0xcd, 0xd2, 0xa3, 0x6c, 0x74, 0x6c, 0xab, 0xde, 0xce, 0x37, 0x52, 0x79, 0x43, 0xae, 0x9e, 0x3e,
	0xd1, 0xac, 0xaf, 0xa8, 0x4d, 0x49, 0xdc, 0x92, 0xcb, 0x87, 0xcf, 0x7c, 0x23, 0x2d, 0xc1, 0xe8,
	0xcd, 0xa7, 0xa3, 0x70, 0xbe, 0x91, 0x96, 0x60, 0xb4, 0xe2, 0xb3, 0x51, 0x38, 0xdf, 0x48, 0xcb,
	0x30, 0x4b, 0xe9, 0x57, 0x35, 0x70, 0xb6, 0x91, 0x96, 0x60, 0x04, 0xfd, 0xda, 0x28, 0x8c, 0x80,
	0xe2, 0x89, 0x43, 0x6d, 0x09, 0xd9, 0x6d, 0xf8, 0xd7, 0xd5, 0x13, 0x87, 0xdc, 0x0e, 0xd4, 0x7d,
	0x78, 0x15, 0x44, 0xb4, 0x6f, 0x54, 0xc1, 0xfc, 0xa9, 0xa8, 0x00, 0x22, 0x96, 0x55, 0x05, 0xf3,
	0xa7, 0xa2, 0x22, 0xc8, 0x52, 0xfa, 0xcd, 0x11, 0x30, 0x7b, 0x2a, 0x2a, 0x80, 0x88, 0xc3, 0xaa,
	0x60, 0x1e, 0x26, 0xf6, 0x06, 0x56, 0xcc, 0xb6, 0xfb, 0x6a, 0x67, 0xdc, 0x56, 0xe0, 0x86, 0x37,
	0xd8, 0x10, 0x67, 0xf3, 0x30, 0x05, 0x10, 0x61, 0xec, 0x2a, 0x98, 0x87, 0x29, 0x80, 0x08, 0xe3,
	0x54, 0xc1, 0x3c, 0x4c, 0x11, 0x64, 0x29, 0xe5, 0x23, 0x60, 0x16, 0xa6, 0x00, 0x22, 0xcc, 0x4e,
	0x15, 0x44, 0x98, 0xb7, 0x70, 0x7b, 0x00, 0xd0, 0x71, 0xa3, 0xbd, 0x62, 0xa2, 0x9e, 0xda, 0x17,
	0x36, 0xbc, 0xc1, 0xa2, 0x1b, 0xed, 0x0d, 0x53, 0x69, 0x0d, 0x44, 0xdb, 0xd5, 0x19, 0x88, 0xa7,
	0x35, 0x90, 0xd1, 0xd5, 0x19, 0xc8, 0xa9, 0x37, 0x58, 0x4a, 0x9f, 0x69, 0x0d, 0x96, 0xea, 0x0d,
	0xa4, 0xde, 0xd3, 0x19, 0xa5, 0xe4, 0x02, 0xb6, 0x22, 0xf7, 0x73, 0x95, 0xbc, 0x3f, 0x34, 0x04,
	0xdd, 0xc5, 0x48, 0x29, 0x79, 0xd1, 0x40, 0x72, 0x4f, 0x67, 0x94, 0x92, 0x17, 0x0d, 0x24, 0xf7,
	0x75, 0x46, 0x29, 0x79, 0xc9, 0x60, 0x29, 0x0d, 0xb4, 0x46, 0x31, 0x79, 0xd1, 0x40, 0xf2, 0x81,
	0xce, 0x40, 0xf2, 0x6b, 0xe4, 0x9c, 0x67, 0xed, 0xdb, 0xd6, 0xae, 0xda, 0xa7, 0xf6, 0x05, 0x78,
	0xd6, 0x5b, 0xb7, 0x9f, 0xc8, 0xdd, 0xa9, 0x08, 0x20, 0x5f, 0x58, 0x04, 0xf2, 0xc7, 0x8d, 0x9d,
	0xa4, 0xdf, 0xb7, 0x22, 0x9b, 0xf9, 0xa2, 0x48, 0xa4, 0x1e, 0x10, 0x1e, 0x25, 0xfd, 0x7e, 0xd7,
	0x66, 0x7e, 0xfe, 0xf0, 0x32, 0xc4, 0x50, 0x2a, 0xae, 0x60, 0xe5, 0x6a, 0xcf, 0x02, 0x57, 0x56,
	0x4b, 0x0a, 0xd8, 0x47, 0x81, 0x5b, 0xa9, 0x26, 0x30, 0x54, 0x7b, 0x5e, 0xc1, 0xf2, 0x6a, 0xc3,
	0x7e, 0xa0, 0xda, 0x81, 0xc2, 0xb2, 0x4e, 0xe4, 0xd5, 0x0a, 0x6d, 0x4b, 0x3c, 0x9a, 0x56, 0xb0,
	0xfc, 0x1e, 0x75, 0x88, 0x05, 0xbe, 0x5c, 0x60, 0xa8, 0x7a, 0xa8, 0xee, 0x1c, 0x33, 0x7c, 0xd5,
	0xc7, 0x02, 0xcb, 0xef, 0x86, 0x47, 0x25, 0xcc, 0xf1, 0xb9, 0x56, 0xc2, 0x4c, 0xd7, 0xc9, 0x79,
	0xcf, 0xda, 0x71, 0xfb, 0x3c, 0x0a, 0x42, 0x79, 0x5d, 0xbe, 0x95, 0xa5, 0x53, 0x27, 0x51, 0xba,
	0x4c, 0xa1, 0xe2, 0xb7, 0x2b, 0x14, 0x6a, 0xdd, 0xc6, 0xed, 0x5e, 0x4e, 0x15, 0x3f, 0xf4, 0x77,
	0xd4, 0xfc, 0x19, 0x3d, 0xfc, 0xd0, 0x7a, 0x07, 0x33, 0x7c, 0x57, 0xeb, 0x60, 0x9e, 0x0f, 0xc8,
	0x8b, 0x9e, 0x15, 0xf1, 0x3e, 0xb7, 0x63, 0x79, 0x65, 0x42, 0xe6, 0xf7, 0xf8, 0xf0, 0x32, 0x7e,
	0x4f, 0xed, 0x7b, 0x5d, 0x81, 0xe0, 0x2a, 0x99, 0x00, 0xb2, 0x2b, 0xfa, 0xe1, 0x11, 0x3a, 0x26,
	0xfe, 0x7e, 0xa3, 0xde, 0xc7, 0xf4, 0x37, 0xb1, 0x07, 0x29, 0x5f, 0xaa, 0x98, 0xf4, 0x07, 0x0d,
	0xb5, 0x09, 0x49, 0x4b, 0x18, 0x98, 0x6d, 0x94, 0xc6, 0x1c, 0x3f, 0xd4, 0xd0, 0xa8, 0xfd, 0x2e,
	0xa1, 0xd5, 0xda, 0xbb, 0xdc, 0x96, 0x4d, 0xfc, 0x91, 0x74, 0x26, 0x4b, 0x33, 0x60, 0x14, 0xd3,
	0xd4, 0x89, 0x98, 0xec, 0xc7, 0x75, 0x22, 0x66, 0x9c, 0xc1, 0x77, 0xb6, 0x68, 0xfe, 0x30, 0xcb,
	0x4f, 0x1a, 0xea, 0x4b, 0xbb, 0x1b, 0x84, 0xc3, 0x24, 0x55, 0x12, 0xa5, 0x7f, 0x3a, 0x42, 0xa2,
	0xe6, 0xeb, 0x58, 0xe5, 0x92, 0xc4, 0xe3, 0x3c, 0x4a, 0xfe, 0xac, 0xa1, 0x16, 0x8c, 0x00, 0x83,
	0x03, 0xf1, 0xd5, 0x56, 0xe1, 0x50, 0xf0, 0xe7, 0x55, 0xae, 0x5c, 0x2f, 0xff, 0xc7, 0xff, 0x45,
	0x91, 0xcb, 0xfe, 0xf3, 0x2b, 0x1c, 0xea, 0xfd, 0xb2, 0xca, 0xe5, 0x3f, 0xc9, 0xf8, 0x81, 0xe5,
	0xfa, 0x0e, 0x4f, 0xad, 0x24, 0x52, 0x3f, 0xf8, 0xfc, 0x2a, 0xbb, 0x28, 0x4f, 0x83, 0x25, 0x8c,
	0x6c, 0x46, 0x85, 0x1f, 0x7c, 0xca, 0x38, 0x4a, 0xff, 0x5a, 0x83, 0xa3, 0xfa, 0x3d, 0x5c, 0x0a,
	0x3f, 0xb0, 0x7a, 0x41, 0xe0, 0x54, 0xa7, 0xf8, 0x4d, 0x43, 0xdd, 0xc5, 0x3e, 0x0d, 0x1e, 0x07,
	0x81, 0x53, 0x9a, 0xa6, 0xce, 0xc3, 0x5c, 0xbf, 0xad, 0xf1, 0x30, 0xdf, 0x2c, 0x3e, 0x9e, 0x13,
	0xd8, 0x91, 0x15, 0xf2, 0x38, 0x09, 0xb3, 0x5f, 0xea, 0x7e, 0xd7, 0x50, 0x8f, 0xda, 0x8b, 0x81,
	0x1d, 0x99, 0x6a, 0x04, 0xf3, 0x68, 0x78, 0x4c, 0xf1, 0x7b, 0x1d, 0x5f, 0x53, 0x1f, 0x9b, 0xc9,
	0x1f, 0x74, 0x3c, 0x36, 0x13, 0x1d, 0xcf, 0x52, 0xfa, 0x85, 0x96, 0x67, 0xa9, 0x8e, 0xc7, 0x46,
	0xf2, 0x47, 0x1d, 0x8f, 0x8d, 0xe4, 0x36, 0xb6, 0x9e, 0x90, 0x47, 0x83, 0xc0, 0x8f, 0x78, 0xf1,
	0xd6, 0xf5, 0x4f, 0x0d, 0xf5, 0x95, 0x61, 0xaa, 0xc1, 0xe1, 0xed, 0xab, 0xd6, 0x41, 0xea, 0x3f,
	0xeb, 0x1d, 0xf9, 0x75, 0xa6, 0x71, 0x90, 0xfc, 0x2f, 0x7a, 0x07, 0xd9, 0xf5, 0x0e, 0x4b, 0xe9,
	0x5f, 0x6b, 0x1c, 0x96, 0xea, 0x1d, 0x74, 0xe0, 0x6f, 0x7a, 0x07, 0x3d, 0x10, 0xdf, 0x2a, 0xa2,
	0x67, 0x58, 0xe9, 0xd9, 0x25, 0xff, 0x7b, 0xb6, 0x22, 0xd1, 0xb2, 0xae, 0x1c, 0xc8, 0xbf, 0x83,
	0x4a, 0x34, 0xa2, 0xff, 0x43, 0x43, 0xe7, 0xdf, 0x6f, 0x25, 0x1a, 0xa1, 0xff, 0xa9, 0xa1, 0x91,
	0x58, 0x43, 0xb3, 0x94, 0xfe, 0x4b, 0x47, 0xb3, 0x54, 0x43, 0x23, 0xe8, 0xbf, 0x35, 0xf4, 0x5a,
	0xbb, 0x3d, 0xd5, 0x26, 0x63, 0x85, 0x37, 0x71, 0x46, 0x93, 0x1c, 0xdf, 0xe3, 0x87, 0xea, 0x4d,
	0x24, 0xfe, 0x34, 0x26, 0xc9, 0xc9, 0xe7, 0xac, 0x9f, 0x70, 0xf5, 0xfe, 0x51, 0x1e, 0xdc, 0x3f,
	0xf6, 0x5e, 0x63, 0xea, 0x7d, 0x32, 0x5e, 0x7a, 0x79, 0x53, 0x94, 0x4f, 0x68, 0xe4, 0x13, 0x45,
	0xb9, 0x4d, 0xc6, 0x0a, 0xaf, 0x61, 0xfe, 0x17, 0x75, 0xfa, 0x02, 0x99, 0xc8, 0x5f, 0xc8, 0xca,
	0x8b, 0xf6, 0xc6, 0xb3, 0xfc, 0xad, 0xaa, 0x7a, 0x19, 0x37, 0x45, 0x2e, 0xaf, 0x74, 0x36, 0xcc,
	0xa5, 0x85, 0xae, 0xd5, 0x5d, 0xdd, 0x34, 0x17, 0x3a, 0xd6, 0xd2, 0xd3, 0x4f, 0xe6, 0x97, 0x97,
	0x16, 0x9b, 0xff, 0x67, 0x5c, 0x20, 0xe3, 0x2b, 0x9f, 0x76, 0xd7, 0x97, 0xad, 0xee, 0xf2, 0xea,
	0xd6, 0xf2, 0xea, 0xe3, 0x66, 0xc3, 0x98, 0x24, 0x4d, 0x79, 0x6a, 0xad, 0x63, 0x3e, 0xea, 0x2e,
	0x3c, 0xe9, 0xac, 0xcc, 0x37, 0x8f, 0x89, 0xb3, 0xab, 0x4f, 0x1f, 0xaf, 0x2e, 0x3e, 0xb4, 0xd6,
	0xcc, 0xd5, 0x47, 0x4b, 0xcb, 0x1d, 0xb3, 0x79, 0xfc, 0xf6, 0x3c, 0x39, 0xbb, 0x90, 0xbd, 0x66,
	0x36, 0xee, 0x92, 0xd3, 0xea, 0xc0, 0xb8, 0x28, 0xde, 0x34, 0x95, 0x5f, 0x15, 0x4f, 0x4d, 0x96,
	0x4f, 0xca, 0x8f, 0xfb, 0x70, 0xfd, 0x8b, 0xf9, 0xc7, 0x66, 0x87, 0x9c, 0x76, 0xf8, 0x0e, 0x4b,
	0xfa, 0xb1, 0x71, 0x9f, 0x18, 0xf3, 0x7e, 0x4b, 0xbc, 0x89, 0x6a, 0x65, 0xab, 0x74, 0xd6, 0xb8,
	0x4e, 0xa6, 0xa7, 0x5a, 0xaf, 0xce, 0x39, 0x7c, 0xc7, 0xf5, 0x5d, 0xf9, 0xba, 0x5a, 0xbc, 0x9b,
	0x16, 0x7d, 0xcb, 0x6a, 0x7d, 0x76, 0x52, 0x9c, 0xdb, 0x3e, 0x25, 0x5e, 0x56, 0xdf, 0xf9, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x34, 0x34, 0xd5, 0x09, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectorClient interface {
	// Collect accepts data from pmm-agent (via pmm-managed).
	Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error)
}

type collectorClient struct {
	cc *grpc.ClientConn
}

func NewCollectorClient(cc *grpc.ClientConn) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, "/qan.Collector/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServer is the server API for Collector service.
type CollectorServer interface {
	// Collect accepts data from pmm-agent (via pmm-managed).
	Collect(context.Context, *CollectRequest) (*CollectResponse, error)
}

func RegisterCollectorServer(s *grpc.Server, srv CollectorServer) {
	s.RegisterService(&_Collector_serviceDesc, srv)
}

func _Collector_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qan.Collector/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).Collect(ctx, req.(*CollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Collector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qan.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _Collector_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qanpb/collector.proto",
}
