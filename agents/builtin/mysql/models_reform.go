// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package mysql

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type eventsStatementsSummaryByDigestViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("performance_schema").
func (v *eventsStatementsSummaryByDigestViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("events_statements_summary_by_digest").
func (v *eventsStatementsSummaryByDigestViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *eventsStatementsSummaryByDigestViewType) Columns() []string {
	return []string{"SCHEMA_NAME", "DIGEST", "DIGEST_TEXT", "COUNT_STAR", "SUM_TIMER_WAIT", "MIN_TIMER_WAIT", "AVG_TIMER_WAIT", "MAX_TIMER_WAIT", "SUM_LOCK_TIME", "SUM_ERRORS", "SUM_WARNINGS", "SUM_ROWS_AFFECTED", "SUM_ROWS_SENT", "SUM_ROWS_EXAMINED", "SUM_CREATED_TMP_DISK_TABLES", "SUM_CREATED_TMP_TABLES", "SUM_SELECT_FULL_JOIN", "SUM_SELECT_FULL_RANGE_JOIN", "SUM_SELECT_RANGE", "SUM_SELECT_RANGE_CHECK", "SUM_SELECT_SCAN", "SUM_SORT_MERGE_PASSES", "SUM_SORT_RANGE", "SUM_SORT_ROWS", "SUM_SORT_SCAN", "SUM_NO_INDEX_USED", "SUM_NO_GOOD_INDEX_USED", "FIRST_SEEN", "LAST_SEEN"}
}

// NewStruct makes a new struct for that view or table.
func (v *eventsStatementsSummaryByDigestViewType) NewStruct() reform.Struct {
	return new(eventsStatementsSummaryByDigest)
}

// eventsStatementsSummaryByDigestView represents events_statements_summary_by_digest view or table in SQL database.
var eventsStatementsSummaryByDigestView = &eventsStatementsSummaryByDigestViewType{
	s: parse.StructInfo{Type: "eventsStatementsSummaryByDigest", SQLSchema: "performance_schema", SQLName: "events_statements_summary_by_digest", Fields: []parse.FieldInfo{{Name: "SchemaName", Type: "*string", Column: "SCHEMA_NAME"}, {Name: "Digest", Type: "*string", Column: "DIGEST"}, {Name: "DigestText", Type: "*string", Column: "DIGEST_TEXT"}, {Name: "CountStar", Type: "int64", Column: "COUNT_STAR"}, {Name: "SumTimerWait", Type: "int64", Column: "SUM_TIMER_WAIT"}, {Name: "MinTimerWait", Type: "int64", Column: "MIN_TIMER_WAIT"}, {Name: "AvgTimerWait", Type: "int64", Column: "AVG_TIMER_WAIT"}, {Name: "MaxTimerWait", Type: "int64", Column: "MAX_TIMER_WAIT"}, {Name: "SumLockTime", Type: "int64", Column: "SUM_LOCK_TIME"}, {Name: "SumErrors", Type: "int64", Column: "SUM_ERRORS"}, {Name: "SumWarnings", Type: "int64", Column: "SUM_WARNINGS"}, {Name: "SumRowsAffected", Type: "int64", Column: "SUM_ROWS_AFFECTED"}, {Name: "SumRowsSent", Type: "int64", Column: "SUM_ROWS_SENT"}, {Name: "SumRowsExamined", Type: "int64", Column: "SUM_ROWS_EXAMINED"}, {Name: "SumCreatedTmpDiskTables", Type: "int64", Column: "SUM_CREATED_TMP_DISK_TABLES"}, {Name: "SumCreatedTmpTables", Type: "int64", Column: "SUM_CREATED_TMP_TABLES"}, {Name: "SumSelectFullJoin", Type: "int64", Column: "SUM_SELECT_FULL_JOIN"}, {Name: "SumSelectFullRangeJoin", Type: "int64", Column: "SUM_SELECT_FULL_RANGE_JOIN"}, {Name: "SumSelectRange", Type: "int64", Column: "SUM_SELECT_RANGE"}, {Name: "SumSelectRangeCheck", Type: "int64", Column: "SUM_SELECT_RANGE_CHECK"}, {Name: "SumSelectScan", Type: "int64", Column: "SUM_SELECT_SCAN"}, {Name: "SumSortMergePasses", Type: "int64", Column: "SUM_SORT_MERGE_PASSES"}, {Name: "SumSortRange", Type: "int64", Column: "SUM_SORT_RANGE"}, {Name: "SumSortRows", Type: "int64", Column: "SUM_SORT_ROWS"}, {Name: "SumSortScan", Type: "int64", Column: "SUM_SORT_SCAN"}, {Name: "SumNoIndexUsed", Type: "int64", Column: "SUM_NO_INDEX_USED"}, {Name: "SumNoGoodIndexUsed", Type: "int64", Column: "SUM_NO_GOOD_INDEX_USED"}, {Name: "FirstSeen", Type: "time.Time", Column: "FIRST_SEEN"}, {Name: "LastSeen", Type: "time.Time", Column: "LAST_SEEN"}}, PKFieldIndex: -1},
	z: new(eventsStatementsSummaryByDigest).Values(),
}

// String returns a string representation of this struct or record.
func (s eventsStatementsSummaryByDigest) String() string {
	res := make([]string, 29)
	res[0] = "SchemaName: " + reform.Inspect(s.SchemaName, true)
	res[1] = "Digest: " + reform.Inspect(s.Digest, true)
	res[2] = "DigestText: " + reform.Inspect(s.DigestText, true)
	res[3] = "CountStar: " + reform.Inspect(s.CountStar, true)
	res[4] = "SumTimerWait: " + reform.Inspect(s.SumTimerWait, true)
	res[5] = "MinTimerWait: " + reform.Inspect(s.MinTimerWait, true)
	res[6] = "AvgTimerWait: " + reform.Inspect(s.AvgTimerWait, true)
	res[7] = "MaxTimerWait: " + reform.Inspect(s.MaxTimerWait, true)
	res[8] = "SumLockTime: " + reform.Inspect(s.SumLockTime, true)
	res[9] = "SumErrors: " + reform.Inspect(s.SumErrors, true)
	res[10] = "SumWarnings: " + reform.Inspect(s.SumWarnings, true)
	res[11] = "SumRowsAffected: " + reform.Inspect(s.SumRowsAffected, true)
	res[12] = "SumRowsSent: " + reform.Inspect(s.SumRowsSent, true)
	res[13] = "SumRowsExamined: " + reform.Inspect(s.SumRowsExamined, true)
	res[14] = "SumCreatedTmpDiskTables: " + reform.Inspect(s.SumCreatedTmpDiskTables, true)
	res[15] = "SumCreatedTmpTables: " + reform.Inspect(s.SumCreatedTmpTables, true)
	res[16] = "SumSelectFullJoin: " + reform.Inspect(s.SumSelectFullJoin, true)
	res[17] = "SumSelectFullRangeJoin: " + reform.Inspect(s.SumSelectFullRangeJoin, true)
	res[18] = "SumSelectRange: " + reform.Inspect(s.SumSelectRange, true)
	res[19] = "SumSelectRangeCheck: " + reform.Inspect(s.SumSelectRangeCheck, true)
	res[20] = "SumSelectScan: " + reform.Inspect(s.SumSelectScan, true)
	res[21] = "SumSortMergePasses: " + reform.Inspect(s.SumSortMergePasses, true)
	res[22] = "SumSortRange: " + reform.Inspect(s.SumSortRange, true)
	res[23] = "SumSortRows: " + reform.Inspect(s.SumSortRows, true)
	res[24] = "SumSortScan: " + reform.Inspect(s.SumSortScan, true)
	res[25] = "SumNoIndexUsed: " + reform.Inspect(s.SumNoIndexUsed, true)
	res[26] = "SumNoGoodIndexUsed: " + reform.Inspect(s.SumNoGoodIndexUsed, true)
	res[27] = "FirstSeen: " + reform.Inspect(s.FirstSeen, true)
	res[28] = "LastSeen: " + reform.Inspect(s.LastSeen, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *eventsStatementsSummaryByDigest) Values() []interface{} {
	return []interface{}{
		s.SchemaName,
		s.Digest,
		s.DigestText,
		s.CountStar,
		s.SumTimerWait,
		s.MinTimerWait,
		s.AvgTimerWait,
		s.MaxTimerWait,
		s.SumLockTime,
		s.SumErrors,
		s.SumWarnings,
		s.SumRowsAffected,
		s.SumRowsSent,
		s.SumRowsExamined,
		s.SumCreatedTmpDiskTables,
		s.SumCreatedTmpTables,
		s.SumSelectFullJoin,
		s.SumSelectFullRangeJoin,
		s.SumSelectRange,
		s.SumSelectRangeCheck,
		s.SumSelectScan,
		s.SumSortMergePasses,
		s.SumSortRange,
		s.SumSortRows,
		s.SumSortScan,
		s.SumNoIndexUsed,
		s.SumNoGoodIndexUsed,
		s.FirstSeen,
		s.LastSeen,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *eventsStatementsSummaryByDigest) Pointers() []interface{} {
	return []interface{}{
		&s.SchemaName,
		&s.Digest,
		&s.DigestText,
		&s.CountStar,
		&s.SumTimerWait,
		&s.MinTimerWait,
		&s.AvgTimerWait,
		&s.MaxTimerWait,
		&s.SumLockTime,
		&s.SumErrors,
		&s.SumWarnings,
		&s.SumRowsAffected,
		&s.SumRowsSent,
		&s.SumRowsExamined,
		&s.SumCreatedTmpDiskTables,
		&s.SumCreatedTmpTables,
		&s.SumSelectFullJoin,
		&s.SumSelectFullRangeJoin,
		&s.SumSelectRange,
		&s.SumSelectRangeCheck,
		&s.SumSelectScan,
		&s.SumSortMergePasses,
		&s.SumSortRange,
		&s.SumSortRows,
		&s.SumSortScan,
		&s.SumNoIndexUsed,
		&s.SumNoGoodIndexUsed,
		&s.FirstSeen,
		&s.LastSeen,
	}
}

// View returns View object for that struct.
func (s *eventsStatementsSummaryByDigest) View() reform.View {
	return eventsStatementsSummaryByDigestView
}

// check interfaces
var (
	_ reform.View   = eventsStatementsSummaryByDigestView
	_ reform.Struct = (*eventsStatementsSummaryByDigest)(nil)
	_ fmt.Stringer  = (*eventsStatementsSummaryByDigest)(nil)
)

type eventsStatementsHistoryViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("performance_schema").
func (v *eventsStatementsHistoryViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("events_statements_history").
func (v *eventsStatementsHistoryViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *eventsStatementsHistoryViewType) Columns() []string {
	return []string{"THREAD_ID", "EVENT_ID", "END_EVENT_ID", "EVENT_NAME", "SOURCE", "TIMER_START", "TIMER_END", "TIMER_WAIT", "LOCK_TIME", "SQL_TEXT", "DIGEST", "DIGEST_TEXT", "CURRENT_SCHEMA", "OBJECT_TYPE", "OBJECT_SCHEMA", "OBJECT_NAME", "OBJECT_INSTANCE_BEGIN", "MYSQL_ERRNO", "RETURNED_SQLSTATE", "MESSAGE_TEXT", "ERRORS", "WARNINGS", "ROWS_AFFECTED", "ROWS_SENT", "ROWS_EXAMINED", "CREATED_TMP_DISK_TABLES", "CREATED_TMP_TABLES", "SELECT_FULL_JOIN", "SELECT_FULL_RANGE_JOIN", "SELECT_RANGE", "SELECT_RANGE_CHECK", "SELECT_SCAN", "SORT_MERGE_PASSES", "SORT_RANGE", "SORT_ROWS", "SORT_SCAN", "NO_INDEX_USED", "NO_GOOD_INDEX_USED", "NESTING_EVENT_ID", "NESTING_EVENT_TYPE", "NESTING_EVENT_LEVEL"}
}

// NewStruct makes a new struct for that view or table.
func (v *eventsStatementsHistoryViewType) NewStruct() reform.Struct {
	return new(EventsStatementsHistory)
}

// EventsStatementsHistoryView represents events_statements_history view or table in SQL database.
var EventsStatementsHistoryView = &eventsStatementsHistoryViewType{
	s: parse.StructInfo{Type: "EventsStatementsHistory", SQLSchema: "performance_schema", SQLName: "events_statements_history", Fields: []parse.FieldInfo{{Name: "ThreadID", Type: "int64", Column: "THREAD_ID"}, {Name: "EventID", Type: "int64", Column: "EVENT_ID"}, {Name: "EndEventID", Type: "*int64", Column: "END_EVENT_ID"}, {Name: "EventName", Type: "string", Column: "EVENT_NAME"}, {Name: "Source", Type: "*string", Column: "SOURCE"}, {Name: "TimerStart", Type: "*int64", Column: "TIMER_START"}, {Name: "TimerEnd", Type: "*int64", Column: "TIMER_END"}, {Name: "TimerWait", Type: "*int64", Column: "TIMER_WAIT"}, {Name: "LockTime", Type: "int64", Column: "LOCK_TIME"}, {Name: "SQLText", Type: "*string", Column: "SQL_TEXT"}, {Name: "Digest", Type: "*string", Column: "DIGEST"}, {Name: "DigestText", Type: "*string", Column: "DIGEST_TEXT"}, {Name: "CurrentSchema", Type: "*string", Column: "CURRENT_SCHEMA"}, {Name: "ObjectType", Type: "*string", Column: "OBJECT_TYPE"}, {Name: "ObjectSchema", Type: "*string", Column: "OBJECT_SCHEMA"}, {Name: "ObjectName", Type: "*string", Column: "OBJECT_NAME"}, {Name: "ObjectInstanceBegin", Type: "*int64", Column: "OBJECT_INSTANCE_BEGIN"}, {Name: "MySQLErrno", Type: "*int32", Column: "MYSQL_ERRNO"}, {Name: "ReturnedSqlstate", Type: "*string", Column: "RETURNED_SQLSTATE"}, {Name: "MessageText", Type: "*string", Column: "MESSAGE_TEXT"}, {Name: "Errors", Type: "int64", Column: "ERRORS"}, {Name: "Warnings", Type: "int64", Column: "WARNINGS"}, {Name: "RowsAffected", Type: "int64", Column: "ROWS_AFFECTED"}, {Name: "RowsSent", Type: "int64", Column: "ROWS_SENT"}, {Name: "RowsExamined", Type: "int64", Column: "ROWS_EXAMINED"}, {Name: "CreatedTmpDiskTables", Type: "int64", Column: "CREATED_TMP_DISK_TABLES"}, {Name: "CreatedTmpTables", Type: "int64", Column: "CREATED_TMP_TABLES"}, {Name: "SelectFullJoin", Type: "int64", Column: "SELECT_FULL_JOIN"}, {Name: "SelectFullRangeJoin", Type: "int64", Column: "SELECT_FULL_RANGE_JOIN"}, {Name: "SelectRange", Type: "int64", Column: "SELECT_RANGE"}, {Name: "SelectRangeCheck", Type: "int64", Column: "SELECT_RANGE_CHECK"}, {Name: "SelectScan", Type: "int64", Column: "SELECT_SCAN"}, {Name: "SortMergePasses", Type: "int64", Column: "SORT_MERGE_PASSES"}, {Name: "SortRange", Type: "int64", Column: "SORT_RANGE"}, {Name: "SortRows", Type: "int64", Column: "SORT_ROWS"}, {Name: "SortScan", Type: "int64", Column: "SORT_SCAN"}, {Name: "MoIndexUsed", Type: "int64", Column: "NO_INDEX_USED"}, {Name: "MoGoodIndexUsed", Type: "int64", Column: "NO_GOOD_INDEX_USED"}, {Name: "NestingEventID", Type: "*int64", Column: "NESTING_EVENT_ID"}, {Name: "NestingEventType", Type: "string", Column: "NESTING_EVENT_TYPE"}, {Name: "NestingEventLevel", Type: "*int32", Column: "NESTING_EVENT_LEVEL"}}, PKFieldIndex: -1},
	z: new(EventsStatementsHistory).Values(),
}

// String returns a string representation of this struct or record.
func (s EventsStatementsHistory) String() string {
	res := make([]string, 41)
	res[0] = "ThreadID: " + reform.Inspect(s.ThreadID, true)
	res[1] = "EventID: " + reform.Inspect(s.EventID, true)
	res[2] = "EndEventID: " + reform.Inspect(s.EndEventID, true)
	res[3] = "EventName: " + reform.Inspect(s.EventName, true)
	res[4] = "Source: " + reform.Inspect(s.Source, true)
	res[5] = "TimerStart: " + reform.Inspect(s.TimerStart, true)
	res[6] = "TimerEnd: " + reform.Inspect(s.TimerEnd, true)
	res[7] = "TimerWait: " + reform.Inspect(s.TimerWait, true)
	res[8] = "LockTime: " + reform.Inspect(s.LockTime, true)
	res[9] = "SQLText: " + reform.Inspect(s.SQLText, true)
	res[10] = "Digest: " + reform.Inspect(s.Digest, true)
	res[11] = "DigestText: " + reform.Inspect(s.DigestText, true)
	res[12] = "CurrentSchema: " + reform.Inspect(s.CurrentSchema, true)
	res[13] = "ObjectType: " + reform.Inspect(s.ObjectType, true)
	res[14] = "ObjectSchema: " + reform.Inspect(s.ObjectSchema, true)
	res[15] = "ObjectName: " + reform.Inspect(s.ObjectName, true)
	res[16] = "ObjectInstanceBegin: " + reform.Inspect(s.ObjectInstanceBegin, true)
	res[17] = "MySQLErrno: " + reform.Inspect(s.MySQLErrno, true)
	res[18] = "ReturnedSqlstate: " + reform.Inspect(s.ReturnedSqlstate, true)
	res[19] = "MessageText: " + reform.Inspect(s.MessageText, true)
	res[20] = "Errors: " + reform.Inspect(s.Errors, true)
	res[21] = "Warnings: " + reform.Inspect(s.Warnings, true)
	res[22] = "RowsAffected: " + reform.Inspect(s.RowsAffected, true)
	res[23] = "RowsSent: " + reform.Inspect(s.RowsSent, true)
	res[24] = "RowsExamined: " + reform.Inspect(s.RowsExamined, true)
	res[25] = "CreatedTmpDiskTables: " + reform.Inspect(s.CreatedTmpDiskTables, true)
	res[26] = "CreatedTmpTables: " + reform.Inspect(s.CreatedTmpTables, true)
	res[27] = "SelectFullJoin: " + reform.Inspect(s.SelectFullJoin, true)
	res[28] = "SelectFullRangeJoin: " + reform.Inspect(s.SelectFullRangeJoin, true)
	res[29] = "SelectRange: " + reform.Inspect(s.SelectRange, true)
	res[30] = "SelectRangeCheck: " + reform.Inspect(s.SelectRangeCheck, true)
	res[31] = "SelectScan: " + reform.Inspect(s.SelectScan, true)
	res[32] = "SortMergePasses: " + reform.Inspect(s.SortMergePasses, true)
	res[33] = "SortRange: " + reform.Inspect(s.SortRange, true)
	res[34] = "SortRows: " + reform.Inspect(s.SortRows, true)
	res[35] = "SortScan: " + reform.Inspect(s.SortScan, true)
	res[36] = "MoIndexUsed: " + reform.Inspect(s.MoIndexUsed, true)
	res[37] = "MoGoodIndexUsed: " + reform.Inspect(s.MoGoodIndexUsed, true)
	res[38] = "NestingEventID: " + reform.Inspect(s.NestingEventID, true)
	res[39] = "NestingEventType: " + reform.Inspect(s.NestingEventType, true)
	res[40] = "NestingEventLevel: " + reform.Inspect(s.NestingEventLevel, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *EventsStatementsHistory) Values() []interface{} {
	return []interface{}{
		s.ThreadID,
		s.EventID,
		s.EndEventID,
		s.EventName,
		s.Source,
		s.TimerStart,
		s.TimerEnd,
		s.TimerWait,
		s.LockTime,
		s.SQLText,
		s.Digest,
		s.DigestText,
		s.CurrentSchema,
		s.ObjectType,
		s.ObjectSchema,
		s.ObjectName,
		s.ObjectInstanceBegin,
		s.MySQLErrno,
		s.ReturnedSqlstate,
		s.MessageText,
		s.Errors,
		s.Warnings,
		s.RowsAffected,
		s.RowsSent,
		s.RowsExamined,
		s.CreatedTmpDiskTables,
		s.CreatedTmpTables,
		s.SelectFullJoin,
		s.SelectFullRangeJoin,
		s.SelectRange,
		s.SelectRangeCheck,
		s.SelectScan,
		s.SortMergePasses,
		s.SortRange,
		s.SortRows,
		s.SortScan,
		s.MoIndexUsed,
		s.MoGoodIndexUsed,
		s.NestingEventID,
		s.NestingEventType,
		s.NestingEventLevel,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *EventsStatementsHistory) Pointers() []interface{} {
	return []interface{}{
		&s.ThreadID,
		&s.EventID,
		&s.EndEventID,
		&s.EventName,
		&s.Source,
		&s.TimerStart,
		&s.TimerEnd,
		&s.TimerWait,
		&s.LockTime,
		&s.SQLText,
		&s.Digest,
		&s.DigestText,
		&s.CurrentSchema,
		&s.ObjectType,
		&s.ObjectSchema,
		&s.ObjectName,
		&s.ObjectInstanceBegin,
		&s.MySQLErrno,
		&s.ReturnedSqlstate,
		&s.MessageText,
		&s.Errors,
		&s.Warnings,
		&s.RowsAffected,
		&s.RowsSent,
		&s.RowsExamined,
		&s.CreatedTmpDiskTables,
		&s.CreatedTmpTables,
		&s.SelectFullJoin,
		&s.SelectFullRangeJoin,
		&s.SelectRange,
		&s.SelectRangeCheck,
		&s.SelectScan,
		&s.SortMergePasses,
		&s.SortRange,
		&s.SortRows,
		&s.SortScan,
		&s.MoIndexUsed,
		&s.MoGoodIndexUsed,
		&s.NestingEventID,
		&s.NestingEventType,
		&s.NestingEventLevel,
	}
}

// View returns View object for that struct.
func (s *EventsStatementsHistory) View() reform.View {
	return EventsStatementsHistoryView
}

// check interfaces
var (
	_ reform.View   = EventsStatementsHistoryView
	_ reform.Struct = (*EventsStatementsHistory)(nil)
	_ fmt.Stringer  = (*EventsStatementsHistory)(nil)
)

func init() {
	parse.AssertUpToDate(&eventsStatementsSummaryByDigestView.s, new(eventsStatementsSummaryByDigest))
	parse.AssertUpToDate(&EventsStatementsHistoryView.s, new(EventsStatementsHistory))
}
